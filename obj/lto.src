	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	_randIntWeighted
_randIntWeighted:
	ld	hl, -16
	call	__frameset
	or	a, a
	sbc	hl, hl
	ld	(ix - 3), hl
	xor	a, a
	ld	(ix - 4), a
	call	_rand
	push	hl
	pop	bc
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	ld	hl, -2
	ld	e, 74
	call	__fdiv
	ld	(ix - 10), bc
	ld	d, a
	ld	hl, (ix + 9)
	ld	bc, (ix + 6)
	ld	(ix - 7), bc
	ld	bc, (ix + 6)
	or	a, a
	sbc	hl, bc
	push	hl
	pop	iy
	ld	bc, 0
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	p, BB0_2
	ld	iy, -1
BB0_2:
	ld	bc, (ix + 12)
	inc	iy
BB0_3:
	lea	hl, iy
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB0_6
	ld	(ix - 13), iy
	push	bc
	pop	iy
	ld	hl, (iy)
	ld	bc, (ix - 3)
	ld	a, (ix - 4)
	ld	(ix - 16), iy
	ld	e, (iy + 3)
	call	__fadd
	ld	(ix - 3), bc
	push	bc
	pop	hl
	ld	(ix - 4), a
	ld	e, a
	ld	bc, (ix - 10)
	ld	a, d
	call	__fcmp
	jp	p, BB0_7
	ld	hl, (ix - 7)
	inc	hl
	ld	(ix - 7), hl
	ld	iy, (ix - 16)
	lea	iy, iy + 4
	lea	bc, iy
	ld	iy, (ix - 13)
	dec	iy
	jr	BB0_3
BB0_6:
	ld	hl, (ix + 9)
	jr	BB0_8
BB0_7:
	ld	hl, (ix - 7)
BB0_8:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_randIntFraction
_randIntFraction:
	call	__frameset0
	call	_random
	ld	bc, (ix + 9)
	call	__iremu
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	hl, (ix + 6)
	add	hl, de
	ld	hl, (hl)
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_powInt
_powInt:
	call	__frameset0
	ld	de, (ix + 9)
	ld	iy, 0
	ld	bc, 1
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	p, BB2_2
	lea	de, iy
BB2_2:
	ld	bc, (ix + 6)
	ld	iy, 1
BB2_3:
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB2_5
	lea	hl, iy
	call	__imulu
	push	hl
	pop	iy
	dec	de
	jr	BB2_3
BB2_5:
	lea	hl, iy
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_appendItem
_appendItem:
	ld	hl, -6
	call	__frameset
	ld	hl, (ix + 9)
	ld	bc, 3
	call	__imulu
	add	hl, bc
	push	hl
	call	_malloc
	pop	de
	ld	(ix - 3), hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB3_7
	ld	de, 1
	ld	bc, (ix + 9)
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	push	bc
	pop	hl
	jp	p, BB3_3
	or	a, a
	sbc	hl, hl
BB3_3:
	ld	bc, (ix + 6)
	ld	de, (ix - 3)
BB3_4:
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB3_6
	push	bc
	pop	iy
	ld	(ix - 6), iy
	ld	bc, (iy)
	push	de
	pop	iy
	ld	(iy), bc
	ld	iy, (ix - 6)
	lea	iy, iy + 3
	lea	bc, iy
	push	de
	pop	iy
	lea	iy, iy + 3
	lea	de, iy
	dec	hl
	jr	BB3_4
BB3_6:
	ld	bc, 3
	ld	hl, (ix + 9)
	call	__imulu
	push	hl
	pop	bc
	ld	hl, (ix - 3)
	add	hl, bc
	ld	de, (ix + 12)
	ld	(hl), de
BB3_7:
	ld	hl, (ix - 3)
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_appendChar
_appendChar:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	de, (ix + 9)
	ld	iy, _guess
	add	iy, de
BB4_1:
	push	hl
	pop	de
	ld	l, (hl)
	ld	a, l
	or	a, a
	jr	z, BB4_3
	ld	(iy), l
	inc	iy
	ex	de, hl
	inc	hl
	jr	BB4_1
BB4_3:
	ld	(iy), 0
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_printCentered
_printCentered:
	call	__frameset0
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetTextFGColor
	pop	hl
	scf
	sbc	hl, hl
	push	hl
	call	_gfx_SetTextBGColor
	pop	hl
	ld	hl, (ix + 6)
	push	hl
	call	_gfx_GetStringWidth
	push	hl
	pop	de
	pop	hl
	ld	hl, 320
	or	a, a
	sbc	hl, de
	ld	c, 1
	call	__ishru
	ld	de, (ix + 9)
	push	de
	push	hl
	ld	hl, (ix + 6)
	push	hl
	call	_gfx_PrintStringXY
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_redrawScreen
_redrawScreen:
	scf
	sbc	hl, hl
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, 8
	push	hl
	ld	hl, 96
	push	hl
	ld	hl, 80
	push	hl
	ld	hl, 112
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 80
	push	hl
	ld	hl, _problem
	push	hl
	call	_printCentered
	pop	hl
	pop	hl
	ld	hl, (_score)
	push	hl
	ld	hl, _.str.12
	push	hl
	ld	hl, 4
	push	hl
	ld	hl, _scoreDisp
	push	hl
	call	_snprintf
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	scf
	sbc	hl, hl
	push	hl
	call	_gfx_SetTextFGColor
	pop	hl
	ld	a, (_header)
	ld	l, a
	push	hl
	call	_gfx_SetTextBGColor
	pop	hl
	ld	hl, _scoreDisp
	push	hl
	call	_strlen
	pop	de
	ld	bc, -8
	call	__imulu
	ld	de, 314
	add	hl, de
	ld	de, 6
	push	de
	push	hl
	ld	hl, _scoreDisp
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetTextFGColor
	pop	hl
	scf
	sbc	hl, hl
	push	hl
	call	_gfx_SetTextBGColor
	pop	hl
	ld	hl, 226
	push	hl
	ld	hl, 6
	push	hl
	ld	hl, _.str.13
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_appendGuess
_appendGuess:
	call	__frameset0
	ld	hl, (_inputLock)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB7_3
	ld	hl, 1
	ld	de, _guess
	ld	(_inputLock), hl
	push	de
	call	_strlen
	push	hl
	pop	de
	pop	hl
	ld	bc, 6
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	p, BB7_3
	ld	hl, (ix + 6)
	push	de
	push	hl
	call	_appendChar
	pop	hl
	pop	hl
BB7_3:
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_clearGuess
_clearGuess:
	ld	hl, (_inputLock)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB8_2
	scf
	sbc	hl, hl
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, 8
	push	hl
	ld	hl, 48
	push	hl
	ld	hl, 120
	push	hl
	ld	hl, 136
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	xor	a, a
	ld	(_guess), a
	ld	hl, 1
	ld	(_inputLock), hl
BB8_2:
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_textEntry
_textEntry:
	ld	hl, -24
	call	__frameset
	ld	iy, _difference
	lea	hl, ix - 9
	ld	(ix - 12), hl
	lea	hl, iy + 3
	ld	(ix - 15), hl
BB9_1:
	call	_kb_Scan
	ld	hl, -720874
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	iyl, e
	ld	iyh, d
	pop	de
	ld	a, iyl
	ld	(_key1), a
	ld	hl, -720872
	ld	c, (hl)
	inc	hl
	ld	b, (hl)
	ld	a, c
	ld	(_key2), a
	ld	hl, -720870
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	(ix - 18), hl
	ld	a, l
	ld	(_key3), a
	ld	hl, -720868
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	(ix - 21), hl
	ld	a, l
	ld	(_key4), a
	ld	hl, -720878
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	(ix - 24), hl
	ld	a, l
	ld	(_key5), a
	dec	iyl
	ld	de, 0
	ld	a, iyl
	cp	a, 8
	jr	c, BB9_4
BB9_2:
	ld	a, c
	cp	a, 2
	jr	nz, BB9_6
	ld	hl, (_character2)
	jr	BB9_13
BB9_4:
	ld	de, 0
	ld	e, iyl
	ld	hl, JTI9_0
	add	hl, de
	add	hl, de
	add	hl, de
	ld	de, 0
	ld	hl, (hl)
	jp	(hl)
BB9_5:
	ld	hl, (_character0)
	jr	BB9_13
BB9_6:
	ld	a, c
	cp	a, 4
	jr	nz, BB9_8
	ld	hl, (_character5)
	jr	BB9_13
BB9_8:
	ld	a, c
	cp	a, 8
	jp	nz, BB9_27
	ld	hl, (_character8)
	jr	BB9_13
BB9_10:
	ld	hl, (_character1)
	jr	BB9_13
BB9_11:
	ld	hl, (_character4)
	jr	BB9_13
BB9_12:
	ld	hl, (_character7)
BB9_13:
	push	hl
	call	_appendGuess
	ld	de, 0
	pop	hl
BB9_14:
	push	de
	call	_gfx_SetTextFGColor
	pop	hl
	scf
	sbc	hl, hl
	push	hl
	call	_gfx_SetTextBGColor
	pop	hl
	ld	hl, 120
	push	hl
	ld	hl, 136
	push	hl
	ld	hl, _guess
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	call	_clock
	ld	bc, (_start)
	ld	a, (_start+3)
	call	__lsub
	push	hl
	pop	bc
	ld	a, e
	call	__ultof
	or	a, a
	sbc	hl, hl
	ld	e, 56
	call	__fmul
	push	bc
	pop	hl
	ld	e, a
	ld	bc, (_timer_seconds)
	ld	a, (_timer_seconds+3)
	call	__fsub
	ld	(_difference), bc
	ld	hl, (ix - 15)
	ld	(hl), a
	ld	hl, -8187281
	ld	e, 58
	call	__fcmp
	ld	e, 1
	jp	p, BB9_16
	ld	e, 0
BB9_16:
	bit	0, e
	ld	hl, 0
	jr	nz, BB9_18
	push	bc
	pop	hl
BB9_18:
	bit	0, e
	ld	e, 0
	jr	nz, BB9_20
	ld	e, a
BB9_20:
	push	de
	push	hl
	ld	hl, (ix - 12)
	push	hl
	call	_os_FloatToReal
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 2
	push	hl
	dec	hl
	push	hl
	ld	hl, 8
	push	hl
	ld	hl, (ix - 12)
	push	hl
	ld	hl, _timerDisp
	push	hl
	call	_os_RealToStr
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	scf
	sbc	hl, hl
	push	hl
	call	_gfx_SetTextFGColor
	pop	hl
	ld	a, (_header)
	ld	l, a
	push	hl
	call	_gfx_SetTextBGColor
	pop	hl
	ld	hl, (_difference)
	ld	a, (_difference+3)
	ld	e, a
	ld	bc, 2097152
	ld	a, 65
	call	__fcmp
	jp	p, BB9_22
	ld	hl, 6
	push	hl
	push	hl
	ld	hl, _.str
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_header)
	ld	l, a
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, 8
	push	hl
	ld	hl, 10
	push	hl
	ld	hl, 6
	push	hl
	ld	hl, 38
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (_difference)
	ld	a, (_difference+3)
	ld	e, a
BB9_22:
	ld	bc, 2097152
	ld	a, 65
	call	__fcmp
	ld	a, 1
	jp	m, BB9_24
	ld	a, 0
BB9_24:
	ld	hl, (_digitShift)
	ld	de, 6
	add	hl, de
	bit	0, a
	jr	nz, BB9_26
	push	de
	pop	hl
BB9_26:
	push	de
	push	hl
	ld	hl, _timerDisp
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ld	bc, (_difference)
	ld	a, (_difference+3)
	or	a, a
	sbc	hl, hl
	ld	e, h
	call	__fcmp
	jp	m, BB9_1
	jp	BB9_42
BB9_27:
	ld	hl, (ix - 18)
	dec	l
	ld	a, l
	cp	a, 8
	jr	c, BB9_31
BB9_28:
	ld	hl, (ix - 21)
	ld	a, l
	cp	a, 1
	jr	nz, BB9_33
	ld	hl, (_inputLock)
	ld	a, (_guess)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	nz, BB9_14
	or	a, a
	jr	nz, BB9_42
	jp	BB9_14
BB9_31:
	ld	de, 0
	ld	e, l
	ld	hl, JTI9_1
	add	hl, de
	add	hl, de
	add	hl, de
	ld	de, 0
	ld	hl, (hl)
	jp	(hl)
BB9_32:
	ld	hl, (_characterM)
	jp	BB9_13
BB9_33:
	ld	a, l
	cp	a, 16
	jr	nz, BB9_35
	ld	hl, (_characterS)
	jp	BB9_13
BB9_35:
	ld	a, l
	cp	a, 64
	jr	nz, BB9_40
	call	_clearGuess
	ld	de, 0
	jp	BB9_14
BB9_37:
	ld	hl, (_character3)
	jp	BB9_13
BB9_38:
	ld	hl, (_character6)
	jp	BB9_13
BB9_39:
	ld	hl, (_character9)
	jp	BB9_13
BB9_40:
	ld	hl, (ix - 24)
	ld	a, l
	cp	a, 64
	jr	z, BB9_43
	or	a, a
	sbc	hl, hl
	ld	(_inputLock), hl
	jp	BB9_14
BB9_42:
	ld	sp, ix
	pop	ix
	ret
BB9_43:
	call	_gfx_End
	or	a, a
	sbc	hl, hl
	push	hl
	call	_exit
	pop	hl
	section	.text,"ax",@progbits
	section	.rodata,"a",@progbits
	private	JTI9_0
JTI9_0:
	dl	BB9_5
	dl	BB9_10
	dl	BB9_2
	dl	BB9_11
	dl	BB9_2
	dl	BB9_2
	dl	BB9_2
	dl	BB9_12
	private	JTI9_1
JTI9_1:
	dl	BB9_32
	dl	BB9_37
	dl	BB9_28
	dl	BB9_38
	dl	BB9_28
	dl	BB9_28
	dl	BB9_28
	dl	BB9_39

	section	.text,"ax",@progbits
	public	_fairFactors
_fairFactors:
	ld	hl, -12
	call	__frameset
	ld	bc, (ix + 6)
	ld	de, -2
	or	a, a
	sbc	hl, hl
	ld	(ix - 6), hl
	push	bc
	pop	hl
	add	hl, de
	ld	de, 4
	or	a, a
	sbc	hl, de
	jr	nc, BB10_2
	call	_random
	ld	bc, 1
	xor	a, a
	call	__land
	ld	bc, (ix + 6)
	bit	0, l
	jp	nz, BB10_15
BB10_2:
	ld	de, 2
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	push	bc
	pop	hl
	jp	p, BB10_4
	ld	hl, 1
BB10_4:
	ld	(ix - 9), hl
	ld	hl, 1
	ld	(ix - 3), hl
	ld	hl, (ix - 9)
BB10_5:
	ld	de, (ix - 3)
	or	a, a
	sbc	hl, de
	jr	z, BB10_9
	push	bc
	pop	hl
	ld	bc, (ix - 3)
	call	__irems
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB10_8
	ld	hl, (ix - 3)
	push	hl
	ld	hl, (ix - 6)
	push	hl
	ld	hl, (ix - 12)
	push	hl
	call	_appendItem
	ld	(ix - 12), hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix - 6)
	inc	hl
	ld	(ix - 6), hl
BB10_8:
	ld	bc, (ix + 6)
	ld	hl, (ix - 9)
	ld	de, (ix - 3)
	inc	de
	ld	(ix - 3), de
	jr	BB10_5
BB10_9:
	ld	bc, 12
	ld	hl, (ix + 6)
	or	a, a
	sbc	hl, bc
	ld	hl, (ix + 6)
	call	pe, __setflag
	push	hl
	pop	bc
	jp	p, BB10_11
	ld	bc, 11
BB10_11:
	ld	(ix - 3), hl
	ld	iy, (ix - 12)
BB10_12:
	push	bc
	pop	hl
	ld	de, (ix - 3)
	or	a, a
	sbc	hl, de
	jp	z, BB10_24
	ld	hl, (ix - 3)
	inc	hl
	ld	(ix - 3), hl
	ld	(ix - 9), bc
	ld	bc, (ix + 6)
	call	__irems
	ld	bc, (ix - 9)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB10_12
	ld	hl, (ix - 3)
	push	hl
	ld	hl, (ix - 6)
	push	hl
	push	iy
	call	_appendItem
	ld	bc, (ix - 9)
	push	hl
	pop	iy
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix - 6)
	inc	hl
	ld	(ix - 6), hl
	jr	BB10_12
BB10_15:
	ld	hl, 2
	ld	(ix - 3), hl
	ld	de, 6
BB10_16:
	ld	hl, (ix - 3)
	or	a, a
	sbc	hl, de
	jr	z, BB10_23
	push	bc
	pop	hl
	ld	de, (ix - 3)
	or	a, a
	sbc	hl, de
	jr	z, BB10_22
	ld	hl, (ix - 3)
	call	__irems
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB10_20
	ld	hl, (ix + 6)
	ld	bc, (ix - 3)
	call	__irems
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB10_21
BB10_20:
	ld	hl, (ix - 3)
	push	hl
	ld	hl, (ix - 6)
	push	hl
	ld	hl, (ix - 12)
	push	hl
	call	_appendItem
	ld	(ix - 12), hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix - 6)
	inc	hl
	ld	(ix - 6), hl
BB10_21:
	ld	bc, (ix + 6)
BB10_22:
	ld	hl, (ix - 3)
	inc	hl
	ld	(ix - 3), hl
	ld	de, 6
	jr	BB10_16
BB10_23:
	ld	iy, (ix - 12)
BB10_24:
	ld	hl, (ix - 6)
	ld	(_factorsSize), hl
	lea	hl, iy
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_gcd
_gcd:
	call	__frameset0
	ld	de, (ix + 6)
	ld	bc, (ix + 9)
BB11_1:
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB11_3
	ex	de, hl
	call	__irems
	push	bc
	pop	de
	push	hl
	pop	bc
	jr	BB11_1
BB11_3:
	ex	de, hl
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_lcm
_lcm:
	call	__frameset0
	ld	de, (ix + 6)
	ld	iy, (ix + 9)
	lea	bc, iy
BB12_1:
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB12_3
	ex	de, hl
	call	__irems
	push	bc
	pop	de
	push	hl
	pop	bc
	jr	BB12_1
BB12_3:
	lea	hl, iy
	ld	bc, (ix + 6)
	call	__imulu
	push	de
	pop	bc
	call	__idivs
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_arithmetic
_arithmetic:
	ld	hl, -9
	call	__frameset
	call	_random
	ld	bc, 81
	call	__iremu
	ld	de, 20
	add	hl, de
	ld	(ix - 3), hl
	call	_random
	ld	bc, 81
	call	__iremu
	ld	(ix - 6), hl
	push	hl
	pop	iy
	ld	de, 20
	add	iy, de
	ld	(ix - 9), iy
	ld	e, (ix + 6)
	ld	a, e
	rlc	a
	sbc	hl, hl
	ld	l, e
	push	iy
	push	hl
	ld	hl, (ix - 3)
	push	hl
	ld	hl, _.str.14
	push	hl
	ld	hl, 17
	push	hl
	ld	hl, _problem
	push	hl
	call	_snprintf
	ld	iy, (ix - 9)
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, -20
	ld	de, (ix - 6)
	or	a, a
	sbc	hl, de
	ld	a, (ix + 6)
	cp	a, 43
	jr	z, BB13_2
	push	hl
	pop	iy
BB13_2:
	ld	de, (ix - 3)
	add	iy, de
	push	iy
	ld	hl, _.str.15
	push	hl
	ld	hl, 7
	push	hl
	ld	hl, _answer
	push	hl
	call	_snprintf
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_multiplication
_multiplication:
	ld	hl, -6
	call	__frameset
	call	_random
	ld	bc, 13
	call	__iremu
	ld	de, 2
	add	hl, de
	ld	(ix - 3), hl
	call	_random
	ld	bc, 13
	call	__iremu
	ld	de, 2
	add	hl, de
	ld	(ix - 6), hl
	push	hl
	ld	hl, (ix - 3)
	push	hl
	ld	hl, _.str.16
	push	hl
	ld	hl, 17
	push	hl
	ld	hl, _problem
	push	hl
	call	_snprintf
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix - 6)
	ld	bc, (ix - 3)
	call	__imulu
	push	hl
	ld	hl, _.str.15
	push	hl
	ld	hl, 7
	push	hl
	ld	hl, _answer
	push	hl
	call	_snprintf
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_division
_division:
	ld	hl, -6
	call	__frameset
	call	_random
	ld	bc, 13
	call	__iremu
	ld	de, 2
	add	hl, de
	ld	(ix - 3), hl
	call	_random
	ld	bc, 13
	call	__iremu
	ld	de, 2
	add	hl, de
	ld	(ix - 6), hl
	ld	bc, (ix - 3)
	call	__imulu
	ld	de, (ix - 3)
	push	de
	push	hl
	ld	hl, _.str.17
	push	hl
	ld	hl, 17
	push	hl
	ld	hl, _problem
	push	hl
	call	_snprintf
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix - 6)
	push	hl
	ld	hl, _.str.15
	push	hl
	ld	hl, 7
	push	hl
	ld	hl, _answer
	push	hl
	call	_snprintf
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_factorial
_factorial:
	ld	hl, -6
	call	__frameset
	ld	hl, 1
	ld	(ix - 6), hl
	call	_random
	ld	bc, 3
	call	__iand
	ld	(ix - 3), hl
	push	hl
	pop	iy
	ld	de, 3
	add	iy, de
	push	iy
	ld	hl, _.str.18
	push	hl
	ld	hl, 17
	push	hl
	ld	hl, _problem
	push	hl
	call	_snprintf
	ld	bc, 2
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	de, 4
	ld	hl, (ix - 3)
	add	hl, de
	ld	(ix - 3), hl
BB16_1:
	ld	hl, (ix - 3)
	push	bc
	pop	de
	or	a, a
	sbc	hl, de
	jr	z, BB16_3
	push	bc
	pop	de
	push	de
	pop	hl
	ld	bc, (ix - 6)
	call	__imulu
	ld	(ix - 6), hl
	inc	de
	push	de
	pop	bc
	jr	BB16_1
BB16_3:
	ld	hl, (ix - 6)
	push	hl
	ld	hl, _.str.15
	push	hl
	ld	hl, 7
	push	hl
	ld	hl, _answer
	push	hl
	call	_snprintf
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_arithmeticFraction
_arithmeticFraction:
	ld	hl, -19
	call	__frameset
	ld	a, (ix + 6)
	ld	(ix - 16), a
	call	_random
	ld	bc, 11
	call	__iremu
	ld	(ix - 9), hl
	call	_random
	ld	iy, (ix - 9)
	ld	bc, 12
	call	__iremu
	ld	(ix - 19), hl
	push	hl
	pop	bc
	inc	bc
	ld	(ix - 6), bc
BB17_1:
	inc	iy
	lea	de, iy
BB17_2:
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB17_4
	ex	de, hl
	call	__irems
	push	bc
	pop	de
	push	hl
	pop	bc
	jr	BB17_2
BB17_4:
	ex	de, hl
	ld	de, 2
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	ld	bc, (ix - 6)
	jp	p, BB17_1
	ld	(ix - 9), iy
	push	bc
	call	_fairFactors
	ld	(ix - 15), hl
	pop	hl
	call	_random
	ld	bc, 11
	call	__iremu
	ld	(ix - 12), hl
	ld	hl, (_factorsSize)
	push	hl
	ld	hl, (ix - 15)
	push	hl
	call	_randIntFraction
	ld	iy, (ix - 12)
	ld	(ix - 3), hl
	pop	hl
	pop	hl
BB17_6:
	inc	iy
	lea	de, iy
	ld	bc, (ix - 3)
BB17_7:
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB17_9
	ex	de, hl
	call	__irems
	push	bc
	pop	de
	push	hl
	pop	bc
	jr	BB17_7
BB17_9:
	ex	de, hl
	ld	de, 2
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	p, BB17_6
	ld	(ix - 12), iy
	ld	c, (ix - 16)
	ld	a, c
	rlc	a
	sbc	hl, hl
	push	hl
	pop	de
	ld	e, c
	ld	hl, (ix - 19)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	iy, (ix - 9)
	jr	nz, BB17_13
	ld	hl, (ix - 3)
	ld	bc, 1
	or	a, a
	sbc	hl, bc
	jr	nz, BB17_13
	ld	hl, (ix - 12)
	push	hl
	push	de
	push	iy
	ld	hl, _.str.14
	push	hl
	ld	hl, 17
	push	hl
	ld	hl, _problem
	push	hl
	call	_snprintf
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	bc, (ix - 6)
	jp	BB17_19
BB17_13:
	ld	hl, (ix - 19)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	bc, (ix - 3)
	jr	nz, BB17_15
	push	bc
	ld	hl, (ix - 12)
	push	hl
	push	de
	push	iy
	ld	hl, _.str.19
	push	hl
	ld	hl, 17
	push	hl
	ld	hl, _problem
	push	hl
	call	_snprintf
	ld	de, (ix - 3)
	ld	hl, 21
	add	hl, sp
	ld	sp, hl
	ld	bc, (ix - 6)
	jr	BB17_20
BB17_15:
	push	bc
	pop	hl
	ld	bc, 1
	or	a, a
	sbc	hl, bc
	jr	nz, BB17_17
	ld	hl, (ix - 12)
	push	hl
	push	de
	ld	hl, (ix - 6)
	push	hl
	push	iy
	ld	hl, _.str.20
	push	hl
	ld	hl, 17
	push	hl
	ld	hl, _problem
	push	hl
	call	_snprintf
	ld	bc, (ix - 6)
	ld	hl, 21
	jr	BB17_18
BB17_17:
	ld	hl, (ix - 3)
	push	hl
	ld	hl, (ix - 12)
	push	hl
	push	de
	ld	hl, (ix - 6)
	push	hl
	push	iy
	ld	hl, _.str.21
	push	hl
	ld	hl, 17
	push	hl
	ld	hl, _problem
	push	hl
	call	_snprintf
	ld	bc, (ix - 6)
	ld	hl, 24
BB17_18:
	add	hl, sp
	ld	sp, hl
BB17_19:
	ld	de, (ix - 3)
BB17_20:
	push	de
	push	bc
	call	_lcm
	push	hl
	pop	de
	pop	hl
	pop	hl
	push	de
	pop	hl
	ld	bc, (ix - 6)
	call	__idivs
	ld	bc, (ix - 9)
	call	__imulu
	ld	(ix - 9), hl
	ld	(ix - 6), de
	ex	de, hl
	ld	bc, (ix - 3)
	call	__idivs
	ld	bc, (ix - 12)
	call	__imulu
	push	hl
	pop	iy
	call	__ineg
	ld	a, (ix - 16)
	cp	a, 43
	jr	z, BB17_22
	push	hl
	pop	iy
BB17_22:
	ld	de, (ix - 9)
	add	iy, de
	lea	hl, iy
	lea	de, iy
	add	iy, iy
	push	de
	pop	iy
	sbc	hl, hl
	push	hl
	pop	bc
	lea	hl, iy
	add	hl, bc
	call	__ixor
	push	hl
	pop	de
	ld	bc, (ix - 6)
BB17_23:
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB17_25
	ex	de, hl
	call	__irems
	push	bc
	pop	de
	push	hl
	pop	bc
	jr	BB17_23
BB17_25:
	lea	hl, iy
	push	de
	pop	bc
	call	__idivs
	push	hl
	pop	iy
	ld	hl, (ix - 6)
	call	__idivs
	push	hl
	pop	de
	ld	bc, 1
	or	a, a
	sbc	hl, bc
	jr	nz, BB17_27
	push	iy
	ld	hl, _.str.15
	push	hl
	ld	hl, 7
	push	hl
	ld	hl, _answer
	push	hl
	call	_snprintf
	jr	BB17_28
BB17_27:
	push	de
	push	iy
	ld	hl, _.str.22
	push	hl
	ld	hl, 7
	push	hl
	ld	hl, _answer
	push	hl
	call	_snprintf
	pop	hl
BB17_28:
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix - 15)
	ld	(ix + 6), hl
	ld	sp, ix
	pop	ix
	jp	_free
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_exponentiation
_exponentiation:
	ld	hl, -6
	call	__frameset
	ld	hl, 2
	ld	bc, 7
	ld	de, _BASEWEIGHTS
	push	de
	push	bc
	push	hl
	call	_randIntWeighted
	ld	(ix - 3), hl
	pop	hl
	pop	hl
	pop	hl
	call	_random
	push	hl
	pop	de
	ld	hl, (ix - 3)
	ld	bc, -2
	add	hl, bc
	ld	bc, 3
	call	__imulu
	push	hl
	pop	bc
	ld	hl, _EXPMAX
	add	hl, bc
	ld	iy, (hl)
	ld	bc, -2
	add	iy, bc
	ex	de, hl
	lea	bc, iy
	call	__iremu
	ld	de, 3
	add	hl, de
	ld	(ix - 6), hl
	push	hl
	ld	hl, (ix - 3)
	push	hl
	ld	hl, _.str.23
	push	hl
	ld	hl, 17
	push	hl
	ld	hl, _problem
	push	hl
	call	_snprintf
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix - 6)
	push	hl
	ld	hl, (ix - 3)
	push	hl
	call	_powInt
	pop	de
	pop	de
	push	hl
	ld	hl, _.str.12
	push	hl
	ld	hl, 7
	push	hl
	ld	hl, _answer
	push	hl
	call	_snprintf
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_exponentiationInverse
_exponentiationInverse:
	ld	hl, -6
	call	__frameset
	ld	hl, 2
	ld	bc, 7
	ld	de, _BASEWEIGHTS
	push	de
	push	bc
	push	hl
	call	_randIntWeighted
	ld	(ix - 3), hl
	pop	hl
	pop	hl
	pop	hl
	call	_random
	push	hl
	pop	de
	ld	hl, (ix - 3)
	ld	bc, -2
	add	hl, bc
	ld	bc, 3
	call	__imulu
	push	hl
	pop	bc
	ld	hl, _EXPMAX
	add	hl, bc
	ld	iy, (hl)
	ld	bc, -2
	add	iy, bc
	ex	de, hl
	lea	bc, iy
	call	__iremu
	ld	de, 3
	add	hl, de
	ld	(ix - 6), hl
	push	hl
	ld	hl, (ix - 3)
	push	hl
	call	_powInt
	pop	de
	pop	de
	ld	de, (ix - 6)
	push	de
	push	hl
	ld	hl, _.str.24
	push	hl
	ld	hl, 17
	push	hl
	ld	hl, _problem
	push	hl
	call	_snprintf
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix - 3)
	push	hl
	ld	hl, _.str.15
	push	hl
	ld	hl, 7
	push	hl
	ld	hl, _answer
	push	hl
	call	_snprintf
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_generateProblem
_generateProblem:
	call	_random
	ld	bc, 9
	call	__iremu
	push	hl
	pop	de
	or	a, a
	sbc	hl, bc
	jr	c, BB20_2
	ret
BB20_2:
	ld	hl, JTI20_0
	add	hl, de
	add	hl, de
	add	hl, de
	ld	hl, (hl)
	jp	(hl)
BB20_3:
	ld	hl, 43
	jr	BB20_5
BB20_4:
	ld	hl, 45
BB20_5:
	push	hl
	call	_arithmetic
	jr	BB20_12
BB20_6:
	call	_multiplication
	ret
BB20_7:
	call	_division
	ret
BB20_8:
	call	_factorial
	ret
BB20_9:
	ld	hl, 43
	jr	BB20_11
BB20_10:
	ld	hl, 45
BB20_11:
	push	hl
	call	_arithmeticFraction
BB20_12:
	pop	hl
	ret
BB20_13:
	call	_exponentiation
	ret
BB20_14:
	call	_exponentiationInverse
	ret
	section	.text,"ax",@progbits
	section	.rodata,"a",@progbits
	private	JTI20_0
JTI20_0:
	dl	BB20_3
	dl	BB20_4
	dl	BB20_6
	dl	BB20_7
	dl	BB20_8
	dl	BB20_9
	dl	BB20_10
	dl	BB20_13
	dl	BB20_14

	section	.text,"ax",@progbits
	public	_main
_main:
	ld	hl, -9
	call	__frameset
	ld	hl, 0
	push	hl
	call	_time
	pop	de
	push	hl
	call	_srand
	pop	hl
	call	_gfx_Begin
	ld	hl, -33
	push	hl
	call	_gfx_SetTextTransparentColor
	pop	hl
	scf
	sbc	hl, hl
	push	hl
	call	_gfx_FillScreen
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	de, (_spacingX)
	ld	hl, 136
	or	a, a
	sbc	hl, de
	ld	(ix - 3), hl
	ld	bc, (_spacingY)
	ld	(ix - 9), bc
	ld	hl, 120
	or	a, a
	sbc	hl, bc
	ld	(ix - 6), hl
	ld	c, 1
	ex	de, hl
	call	__ishl
	push	hl
	pop	iy
	ld	de, 48
	add	iy, de
	ld	hl, (ix - 9)
	call	__ishl
	ld	de, 8
	add	hl, de
	push	hl
	push	iy
	ld	hl, (ix - 6)
	push	hl
	ld	hl, (ix - 3)
	push	hl
	call	_gfx_Rectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_header)
	ld	l, a
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, 20
	push	hl
	ld	hl, 320
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	call	_clock
	ld	d, 0
	ld	a, e
	ld	(_start), hl
	ld	(_start+3), a
BB21_1:
	ld	a, d
	ld	(_problem), a
	call	_generateProblem
	call	_redrawScreen
	call	_textEntry
	ld	hl, _answer
	push	hl
	ld	hl, _guess
	push	hl
	call	_strcmp
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB21_3
	ld	hl, (_score)
	inc	hl
	ld	(_score), hl
BB21_3:
	call	_clearGuess
	ld	bc, (_difference)
	ld	a, (_difference+3)
	or	a, a
	sbc	hl, hl
	ld	d, h
	ld	e, d
	call	__fcmp
	jp	m, BB21_1
	scf
	sbc	hl, hl
	push	hl
	call	_gfx_FillScreen
	pop	hl
	ld	hl, 80
	push	hl
	ld	hl, _.str.25
	push	hl
	call	_printCentered
	pop	hl
	pop	hl
	ld	hl, 120
	push	hl
	ld	hl, _scoreDisp
	push	hl
	call	_printCentered
	pop	hl
	pop	hl
BB21_5:
	call	_os_GetCSC
	or	a, a
	jr	z, BB21_5
	call	_gfx_End
	or	a, a
	sbc	hl, hl
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.rodata,"a",@progbits
	public	_ADD
_ADD:
	db	43

	section	.rodata,"a",@progbits
	public	_SUB
_SUB:
	db	45

	section	.rodata,"a",@progbits
	public	_ADDMIN
_ADDMIN:
	dl	20

	section	.rodata,"a",@progbits
	public	_ADDMAX
_ADDMAX:
	dl	100

	section	.rodata,"a",@progbits
	public	_MULTMIN
_MULTMIN:
	dl	2

	section	.rodata,"a",@progbits
	public	_MULTMAX
_MULTMAX:
	dl	14

	section	.rodata,"a",@progbits
	public	_FACTMIN
_FACTMIN:
	dl	3

	section	.rodata,"a",@progbits
	public	_FACTMAX
_FACTMAX:
	dl	6

	section	.rodata,"a",@progbits
	public	_DENMIN
_DENMIN:
	dl	1

	section	.rodata,"a",@progbits
	public	_DENMAX
_DENMAX:
	dl	12

	section	.rodata,"a",@progbits
	public	_NUMMIN
_NUMMIN:
	dl	1

	section	.rodata,"a",@progbits
	public	_NUMMAX
_NUMMAX:
	dl	11

	section	.rodata,"a",@progbits
	public	_BASEMIN
_BASEMIN:
	dl	2

	section	.rodata,"a",@progbits
	public	_BASEMAX
_BASEMAX:
	dl	7

	section	.rodata,"a",@progbits
	public	_BASEWEIGHTS
_BASEWEIGHTS:
	dd	0x3ef5c28f
	dd	0x3e23d70a
	dd	0x3e051eb8
	dd	0x3e051eb8
	dd	0x3d4ccccd
	dd	0x3d4ccccd

	section	.rodata,"a",@progbits
	public	_EXPMIN
_EXPMIN:
	dl	3

	section	.rodata,"a",@progbits
	public	_EXPMAX
_EXPMAX:
	dl	8
	dl	4
	dl	4
	dl	4
	dl	3
	dl	3

	section	.rodata,"a",@progbits
	public	_PROBLEMWEIGHTS
_PROBLEMWEIGHTS:
	dd	0x3de147ae
	dd	0x3de147ae
	dd	0x3de147ae
	dd	0x3de147ae
	dd	0x3de147ae
	dd	0x3de147ae
	dd	0x3de147ae
	dd	0x3de147ae
	dd	0x3de147ae

	section	.rodata,"a",@progbits
	private	_.str
_.str:
	db	"0", 0

	section	.data,"aw",@progbits
	public	_character0
_character0:
	dl	_.str

	section	.rodata,"a",@progbits
	private	_.str.1
_.str.1:
	db	"1", 0

	section	.data,"aw",@progbits
	public	_character1
_character1:
	dl	_.str.1

	section	.rodata,"a",@progbits
	private	_.str.2
_.str.2:
	db	"2", 0

	section	.data,"aw",@progbits
	public	_character2
_character2:
	dl	_.str.2

	section	.rodata,"a",@progbits
	private	_.str.3
_.str.3:
	db	"3", 0

	section	.data,"aw",@progbits
	public	_character3
_character3:
	dl	_.str.3

	section	.rodata,"a",@progbits
	private	_.str.4
_.str.4:
	db	"4", 0

	section	.data,"aw",@progbits
	public	_character4
_character4:
	dl	_.str.4

	section	.rodata,"a",@progbits
	private	_.str.5
_.str.5:
	db	"5", 0

	section	.data,"aw",@progbits
	public	_character5
_character5:
	dl	_.str.5

	section	.rodata,"a",@progbits
	private	_.str.6
_.str.6:
	db	"6", 0

	section	.data,"aw",@progbits
	public	_character6
_character6:
	dl	_.str.6

	section	.rodata,"a",@progbits
	private	_.str.7
_.str.7:
	db	"7", 0

	section	.data,"aw",@progbits
	public	_character7
_character7:
	dl	_.str.7

	section	.rodata,"a",@progbits
	private	_.str.8
_.str.8:
	db	"8", 0

	section	.data,"aw",@progbits
	public	_character8
_character8:
	dl	_.str.8

	section	.rodata,"a",@progbits
	private	_.str.9
_.str.9:
	db	"9", 0

	section	.data,"aw",@progbits
	public	_character9
_character9:
	dl	_.str.9

	section	.rodata,"a",@progbits
	private	_.str.10
_.str.10:
	db	"/", 0

	section	.data,"aw",@progbits
	public	_characterS
_characterS:
	dl	_.str.10

	section	.rodata,"a",@progbits
	private	_.str.11
_.str.11:
	db	"-", 0

	section	.data,"aw",@progbits
	public	_characterM
_characterM:
	dl	_.str.11

	section	.bss,"aw",@nobits
	public	_score
_score:
	rb	3

	section	.data,"aw",@progbits
	public	_spacingX
_spacingX:
	dl	4

	section	.data,"aw",@progbits
	public	_spacingY
_spacingY:
	dl	4

	section	.bss,"aw",@nobits
	public	_inputLock
_inputLock:
	rb	3

	section	.data,"aw",@progbits
	public	_timer_seconds
_timer_seconds:
	dd	0x42b40000

	section	.data,"aw",@progbits
	public	_header
_header:
	db	74

	section	.data,"aw",@progbits
	public	_digitShift
_digitShift:
	dl	8

	section	.bss,"aw",@nobits
	public	_guess
_guess:
	rb	7

	section	.bss,"aw",@nobits
	public	_problem
_problem:
	rb	17

	section	.bss,"aw",@nobits
	public	_scoreDisp
_scoreDisp:
	rb	4

	section	.rodata,"a",@progbits
	private	_.str.12
_.str.12:
	db	"%i", 0

	section	.rodata,"a",@progbits
	private	_.str.13
_.str.13:
	db	"V 0.01-beta", 0

	section	.bss,"aw",@nobits
	public	_key1
_key1:
	rb	1

	section	.bss,"aw",@nobits
	public	_key2
_key2:
	rb	1

	section	.bss,"aw",@nobits
	public	_key3
_key3:
	rb	1

	section	.bss,"aw",@nobits
	public	_key4
_key4:
	rb	1

	section	.bss,"aw",@nobits
	public	_key5
_key5:
	rb	1

	section	.bss,"aw",@nobits
	public	_start
_start:
	rb	4

	section	.bss,"aw",@nobits
	public	_difference
_difference:
	rb	4

	section	.bss,"aw",@nobits
	public	_factorsSize
_factorsSize:
	rb	3

	section	.rodata,"a",@progbits
	private	_.str.14
_.str.14:
	db	"%i %c %i", 0

	section	.bss,"aw",@nobits
	public	_answer
_answer:
	rb	7

	section	.rodata,"a",@progbits
	private	_.str.15
_.str.15:
	db	"%d", 0

	section	.rodata,"a",@progbits
	private	_.str.16
_.str.16:
	db	"%i * %i", 0

	section	.rodata,"a",@progbits
	private	_.str.17
_.str.17:
	db	"%i / %i", 0

	section	.rodata,"a",@progbits
	private	_.str.18
_.str.18:
	db	"%i!", 0

	section	.rodata,"a",@progbits
	private	_.str.19
_.str.19:
	db	"%i %c %i/%i", 0

	section	.rodata,"a",@progbits
	private	_.str.20
_.str.20:
	db	"%i/%i %c %i", 0

	section	.rodata,"a",@progbits
	private	_.str.21
_.str.21:
	db	"%i/%i %c %i/%i", 0

	section	.rodata,"a",@progbits
	private	_.str.22
_.str.22:
	db	"%d/%d", 0

	section	.rodata,"a",@progbits
	private	_.str.23
_.str.23:
	db	"%i^%i", 0

	section	.rodata,"a",@progbits
	private	_.str.24
_.str.24:
	db	"%i^(1/%i)", 0

	section	.rodata,"a",@progbits
	private	_.str.25
_.str.25:
	db	"program completed", 0

	section	.bss,"aw",@nobits
	public	_timerDisp
_timerDisp:
	rb	10

	ident	"clang version 15.0.0 (https://github.com/CE-Programming/llvm-project 23b78267b5d376b232475d0805a937e54b61e0d0)"
	extern	_random
	extern	_gfx_SetTextTransparentColor
	extern	__Unwind_SjLj_Register
	extern	_malloc
	extern	_srand
	extern	_gfx_SetTextFGColor
	extern	_gfx_Begin
	extern	__fadd
	extern	_rand
	extern	_snprintf
	extern	_os_RealToStr
	extern	__ishl
	extern	_strlen
	extern	__idivs
	extern	__setflag
	extern	_exit
	extern	__iand
	extern	_gfx_FillRectangle
	extern	__ixor
	extern	__ltof
	extern	__ineg
	extern	_os_GetCSC
	extern	_free
	extern	__fsub
	extern	_time
	extern	__frameset
	extern	_gfx_SetTextBGColor
	extern	_kb_Scan
	extern	__lsub
	extern	_strcmp
	extern	_gfx_GetStringWidth
	extern	__ishru
	extern	__ultof
	extern	__fmul
	extern	_gfx_FillScreen
	extern	_os_FloatToReal
	extern	__irems
	extern	__iremu
	extern	__Unwind_SjLj_Unregister
	extern	__fdiv
	extern	__imulu
	extern	_gfx_SetColor
	extern	_gfx_Rectangle
	extern	__land
	extern	_gfx_PrintStringXY
	extern	_gfx_End
	extern	__frameset0
	extern	__fcmp
	extern	_clock
