	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	_randIntWeighted
_randIntWeighted:
	ld	hl, -16
	call	__frameset
	or	a, a
	sbc	hl, hl
	ld	(ix - 3), hl
	xor	a, a
	ld	(ix - 4), a
	call	_rand
	push	hl
	pop	bc
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	ld	hl, -2
	ld	e, 74
	call	__fdiv
	ld	(ix - 10), bc
	ld	d, a
	ld	hl, (ix + 9)
	ld	bc, (ix + 6)
	ld	(ix - 7), bc
	ld	bc, (ix + 6)
	or	a, a
	sbc	hl, bc
	push	hl
	pop	iy
	ld	bc, 0
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	p, BB0_2
	ld	iy, -1
BB0_2:
	ld	bc, (ix + 12)
	inc	iy
BB0_3:
	lea	hl, iy
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB0_6
	ld	(ix - 13), iy
	push	bc
	pop	iy
	ld	hl, (iy)
	ld	bc, (ix - 3)
	ld	a, (ix - 4)
	ld	(ix - 16), iy
	ld	e, (iy + 3)
	call	__fadd
	ld	(ix - 3), bc
	push	bc
	pop	hl
	ld	(ix - 4), a
	ld	e, a
	ld	bc, (ix - 10)
	ld	a, d
	call	__fcmp
	jp	p, BB0_7
	ld	hl, (ix - 7)
	inc	hl
	ld	(ix - 7), hl
	ld	iy, (ix - 16)
	lea	iy, iy + 4
	lea	bc, iy
	ld	iy, (ix - 13)
	dec	iy
	jr	BB0_3
BB0_6:
	ld	hl, (ix + 9)
	jr	BB0_8
BB0_7:
	ld	hl, (ix - 7)
BB0_8:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_randIntArray
_randIntArray:
	call	__frameset0
	call	_random
	ld	bc, (ix + 9)
	call	__iremu
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	hl, (ix + 6)
	add	hl, de
	ld	hl, (hl)
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_ptypeAllOff
_ptypeAllOff:
	ld	hl, -6
	call	__frameset
	ld	hl, _ptypeState
	ld	(ix - 3), hl
	ld	de, 0
BB2_1:
	push	de
	pop	iy
	lea	hl, iy
	ld	de, 9
	or	a, a
	sbc	hl, de
	jr	z, BB2_3
	ld	bc, (ix - 3)
	push	bc
	pop	hl
	ld	hl, (hl)
	ld	(ix - 6), hl
	lea	de, iy
	inc	de
	lea	hl, iy
	push	bc
	pop	iy
	lea	iy, iy + 3
	ld	(ix - 3), iy
	push	hl
	pop	iy
	ld	hl, (ix - 6)
	ld	bc, 1
	or	a, a
	sbc	hl, bc
	jr	nz, BB2_1
BB2_3:
	lea	hl, iy
	ld	de, 9
	or	a, a
	sbc	hl, de
	ccf
	sbc	a, a
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_forceQuit
_forceQuit:
	call	__frameset0
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_FillScreen
	pop	hl
	call	_gfx_End
	ld	hl, (ix + 6)
	push	hl
	call	_exit
	pop	hl
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_powInt
_powInt:
	call	__frameset0
	ld	de, (ix + 9)
	ld	iy, 0
	ld	bc, 1
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	p, BB4_2
	lea	de, iy
BB4_2:
	ld	bc, (ix + 6)
	ld	iy, 1
BB4_3:
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB4_5
	lea	hl, iy
	call	__imulu
	push	hl
	pop	iy
	dec	de
	jr	BB4_3
BB4_5:
	lea	hl, iy
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_appendItem
_appendItem:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	de, (ix + 9)
	ld	iy, _factors
	ld	bc, 3
	call	__imulu
	push	hl
	pop	bc
	add	iy, bc
	ld	(iy), de
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_appendChar
_appendChar:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	de, (ix + 9)
	ld	iy, _guess
	add	iy, de
BB6_1:
	push	hl
	pop	de
	ld	l, (hl)
	ld	a, l
	or	a, a
	jr	z, BB6_3
	ld	(iy), l
	inc	iy
	ex	de, hl
	inc	hl
	jr	BB6_1
BB6_3:
	ld	(iy), 0
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_printCentered
_printCentered:
	call	__frameset0
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetTextFGColor
	pop	hl
	scf
	sbc	hl, hl
	push	hl
	call	_gfx_SetTextBGColor
	pop	hl
	ld	hl, (ix + 6)
	push	hl
	call	_gfx_GetStringWidth
	push	hl
	pop	de
	pop	hl
	ld	hl, 320
	or	a, a
	sbc	hl, de
	ld	c, 1
	call	__ishru
	ld	de, (ix + 9)
	push	de
	push	hl
	ld	hl, (ix + 6)
	push	hl
	call	_gfx_PrintStringXY
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_redrawScreen
_redrawScreen:
	ld	hl, -21
	call	__frameset
	scf
	sbc	hl, hl
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, 40
	push	hl
	ld	hl, 80
	push	hl
	ld	hl, 65
	push	hl
	ld	hl, 120
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 80
	push	hl
	ld	hl, _problem
	push	hl
	call	_printCentered
	pop	hl
	pop	hl
	ld	de, (_problemDispType)
	ld	bc, 1
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	inc	bc
	jp	nz, BB8_10
	ld	hl, _problemDispOperation
	ld	de, 80
	push	de
	push	hl
	call	_printCentered
	pop	hl
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, (_problemTerm)
	ld	de, 1
	or	a, a
	sbc	hl, de
	ld	hl, 0
	jr	z, BB8_3
	ld	hl, 2
BB8_3:
	lea	de, ix - 12
	ld	(ix - 18), de
	push	hl
	ld	hl, 12
	push	hl
	ld	hl, 83
	push	hl
	ld	hl, 138
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (_problemTerm+3)
	ld	de, 1
	or	a, a
	sbc	hl, de
	ld	hl, 0
	jr	z, BB8_5
	ld	hl, 2
BB8_5:
	push	hl
	ld	hl, 12
	push	hl
	ld	hl, 83
	push	hl
	ld	hl, 168
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	(ix - 12), 0
	ld	hl, (ix - 18)
	push	hl
	pop	iy
	inc	iy
	ld	bc, 11
	lea	de, iy
	ldir
	ld	de, 12
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
	ld	hl, _problemDispTerm
	ld	(ix - 15), hl
BB8_6:
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jr	z, BB8_12
	ld	hl, (ix - 15)
	push	hl
	ld	(ix - 21), bc
	call	_strlen
	ld	bc, (ix - 21)
	pop	de
	ld	de, 2
	or	a, a
	sbc	hl, de
	jr	nz, BB8_9
	push	bc
	pop	de
	ld	hl, (ix - 18)
	add	hl, de
	ld	de, 3
	ld	(hl), de
BB8_9:
	ld	iy, (ix - 15)
	lea	iy, iy + 4
	ld	(ix - 15), iy
	ld	de, 3
	push	bc
	pop	hl
	add	hl, de
	push	hl
	pop	bc
	ld	de, 12
	jr	BB8_6
BB8_10:
	ld	iy, 80
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jp	nz, BB8_21
	push	iy
	ld	hl, _problemDispTerm
	push	hl
	call	_printCentered
	pop	hl
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetTextFGColor
	pop	hl
	scf
	sbc	hl, hl
	push	hl
	call	_gfx_SetTextBGColor
	pop	hl
	ld	hl, 76
	push	hl
	ld	hl, 165
	push	hl
	ld	hl, _problemDispTerm+4
	jp	BB8_20
BB8_12:
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetTextFGColor
	pop	hl
	scf
	sbc	hl, hl
	push	hl
	call	_gfx_SetTextBGColor
	pop	hl
	ld	de, (ix - 12)
	ld	hl, 140
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	ld	hl, (_problemTerm)
	ld	bc, 1
	or	a, a
	sbc	hl, bc
	ld	hl, 80
	jr	z, BB8_14
	ld	hl, 74
BB8_14:
	push	hl
	push	de
	ld	hl, _problemDispTerm
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (_problemTerm)
	ld	bc, 1
	or	a, a
	sbc	hl, bc
	jr	z, BB8_16
	ld	de, (ix - 9)
	ld	hl, 140
	or	a, a
	sbc	hl, de
	ld	de, 86
	push	de
	push	hl
	ld	hl, _problemDispTerm+4
	push	hl
	call	_gfx_PrintStringXY
	ld	bc, 1
	pop	hl
	pop	hl
	pop	hl
BB8_16:
	ld	de, (ix - 6)
	ld	hl, 170
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	ld	hl, (_problemTerm+3)
	or	a, a
	sbc	hl, bc
	ld	hl, 80
	jr	z, BB8_18
	ld	hl, 74
BB8_18:
	push	hl
	push	de
	ld	hl, _problemDispTerm+8
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (_problemTerm+3)
	ld	de, 1
	or	a, a
	sbc	hl, de
	jp	z, BB8_24
	ld	de, (ix - 3)
	ld	hl, 170
	or	a, a
	sbc	hl, de
	ld	de, 86
	push	de
	push	hl
	ld	hl, _problemDispTerm+12
BB8_20:
	push	hl
	call	_gfx_PrintStringXY
	jp	BB8_23
BB8_21:
	ld	bc, 3
	ex	de, hl
	or	a, a
	sbc	hl, bc
	jp	nz, BB8_24
	push	iy
	ld	hl, _problemDispTerm
	push	hl
	call	_printCentered
	pop	hl
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetTextFGColor
	pop	hl
	scf
	sbc	hl, hl
	push	hl
	call	_gfx_SetTextBGColor
	pop	hl
	ld	hl, _problemDispTerm
	push	hl
	call	_gfx_GetStringWidth
	push	hl
	pop	de
	pop	hl
	ld	hl, 320
	or	a, a
	sbc	hl, de
	ld	c, 1
	call	__ishru
	ld	de, -15
	add	hl, de
	ld	de, 76
	push	de
	push	hl
	ld	hl, _problemDispTerm+4
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, _problemDispTerm
	push	hl
	call	_gfx_GetStringWidth
	push	hl
	pop	de
	pop	hl
	ld	hl, 320
	or	a, a
	sbc	hl, de
	ld	c, 1
	call	__ishru
	ld	de, -5
	add	hl, de
	ld	de, 14
	push	de
	ld	de, 2
	push	de
	ld	de, 74
	push	de
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, _problemDispTerm
	push	hl
	call	_gfx_GetStringWidth
	push	hl
	pop	de
	pop	hl
	ld	hl, 320
	or	a, a
	sbc	hl, de
	ld	c, 1
	call	__ishru
	ld	de, -5
	add	hl, de
	ld	(ix - 15), hl
	ld	hl, _problemDispTerm
	push	hl
	call	_gfx_GetStringWidth
	pop	de
	ld	de, 7
	add	hl, de
	ld	de, 2
	push	de
	push	hl
	ld	hl, 74
	push	hl
	ld	hl, (ix - 15)
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, _problemDispTerm
	push	hl
	call	_gfx_GetStringWidth
	push	hl
	pop	de
	pop	hl
	ld	hl, 320
	or	a, a
	sbc	hl, de
	ld	c, 1
	call	__ishru
	ld	de, -8
	add	hl, de
	ld	(ix - 15), hl
	ld	hl, _problemDispTerm
	push	hl
	call	_gfx_GetStringWidth
	push	hl
	pop	de
	pop	hl
	ld	hl, 320
	or	a, a
	sbc	hl, de
	ld	c, 1
	call	__ishru
	ld	de, -5
	add	hl, de
	ld	de, 88
	push	de
	push	hl
	ld	hl, 85
	push	hl
	ld	hl, (ix - 15)
	push	hl
	call	_gfx_Line
	pop	hl
BB8_23:
	pop	hl
	pop	hl
	pop	hl
BB8_24:
	ld	hl, (_score)
	push	hl
	ld	hl, _.str.22
	push	hl
	ld	hl, 4
	push	hl
	ld	hl, _scoreDisp
	push	hl
	call	_snprintf
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_header)
	ld	l, a
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, 20
	push	hl
	ld	hl, 30
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 290
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	scf
	sbc	hl, hl
	push	hl
	call	_gfx_SetTextFGColor
	pop	hl
	ld	a, (_header)
	ld	l, a
	push	hl
	call	_gfx_SetTextBGColor
	pop	hl
	ld	hl, _scoreDisp
	push	hl
	call	_gfx_GetStringWidth
	push	hl
	pop	de
	pop	hl
	ld	hl, 314
	or	a, a
	sbc	hl, de
	ld	de, 6
	push	de
	push	hl
	ld	hl, _scoreDisp
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetTextFGColor
	pop	hl
	scf
	sbc	hl, hl
	push	hl
	call	_gfx_SetTextBGColor
	pop	hl
	ld	hl, 226
	push	hl
	ld	hl, 6
	push	hl
	ld	hl, _.str.23
	push	hl
	call	_gfx_PrintStringXY
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_appendGuess
_appendGuess:
	call	__frameset0
	ld	hl, _guess
	push	hl
	call	_strlen
	push	hl
	pop	de
	pop	hl
	ld	bc, 6
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	p, BB9_2
	ld	hl, (ix + 6)
	push	de
	push	hl
	call	_appendChar
	pop	hl
	pop	hl
BB9_2:
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_clearGuess
_clearGuess:
	scf
	sbc	hl, hl
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, 8
	push	hl
	ld	hl, 48
	push	hl
	ld	hl, 120
	push	hl
	ld	hl, 136
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	xor	a, a
	ld	(_guess), a
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_textEntry
_textEntry:
	ld	hl, -24
	call	__frameset
	ld	iy, _difference
	lea	hl, ix - 9
	ld	(ix - 15), hl
	lea	hl, iy + 3
	ld	(ix - 21), hl
BB11_1:
	call	_kb_Scan
	ld	hl, -720878
	ld	c, (hl)
	inc	hl
	ld	b, (hl)
	ld	a, c
	ld	(_key1), a
	ld	hl, -720868
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	a, e
	ld	(_key6), a
	ld	a, c
	bit	6, a
	ld	de, 0
	push	de
	pop	iy
	ld	hl, _inputMap
	ld	(ix - 12), hl
	jp	nz, BB11_32
BB11_2:
	lea	hl, iy
	ld	bc, 36
	or	a, a
	sbc	hl, bc
	jp	z, BB11_9
	ld	(ix - 18), iy
	ld	hl, (ix - 12)
	ld	de, (hl)
	ld	h, 0
	ld	l, d
	ld	c, 1
	call	__sshl
	ld	bc, 0
	ld	c, l
	ld	b, h
	ld	iy, -720880
	add	iy, bc
	ld	l, (iy)
	ld	h, (iy + 1)
	ld	(ix - 24), hl
	ld	l, e
	ld	h, d
	ld.sis	bc, 255
	call	__sand
	ld	e, l
	ld	d, h
	ld	a, e
	ld	hl, (ix - 24)
	and	a, l
	or	a, a
	jr	z, BB11_6
	ld	bc, (ix - 18)
	ld	hl, _inputLock
	add	hl, bc
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB11_6
	ld	de, (ix - 18)
	ld	(ix - 24), de
	ld	hl, _character
	add	hl, de
	ld	hl, (hl)
	push	hl
	call	_appendGuess
	ld	bc, (ix - 18)
	pop	hl
	ld	hl, _inputLock
	ld	de, (ix - 24)
	add	hl, de
	ld	de, 1
	ld	(hl), de
	dec	de
	jr	BB11_8
BB11_6:
	ld	l, (iy)
	ld	h, (iy + 1)
	ld	a, l
	and	a, e
	or	a, a
	ld	de, 0
	ld	bc, (ix - 18)
	jr	nz, BB11_8
	push	bc
	pop	de
	ld	hl, _inputLock
	add	hl, de
	ld	de, 0
	ld	(hl), de
BB11_8:
	ld	iy, (ix - 12)
	lea	iy, iy + 2
	ld	(ix - 12), iy
	push	bc
	pop	iy
	ld	bc, 3
	add	iy, bc
	jp	BB11_2
BB11_9:
	ld	a, (_key6)
	ld	b, a
	and	a, 1
	ld	c, a
	ld	a, (_guess)
	bit	0, c
	jr	z, BB11_12
	ld	hl, (_inputLock+54)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB11_12
	or	a, a
	jp	nz, BB11_33
BB11_12:
	bit	0, c
	jr	nz, BB11_14
	ld	(_inputLock+54), de
BB11_14:
	ld	a, b
	and	a, 64
	ld	c, a
	or	a, a
	jr	z, BB11_17
	ld	hl, (_inputLock+48)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB11_17
	call	_clearGuess
	ld	hl, 1
	jr	BB11_18
BB11_17:
	ld	a, c
	or	a, a
	ex	de, hl
	jr	nz, BB11_19
BB11_18:
	ld	(_inputLock+48), hl
BB11_19:
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetTextFGColor
	pop	hl
	scf
	sbc	hl, hl
	push	hl
	call	_gfx_SetTextBGColor
	pop	hl
	ld	hl, 120
	push	hl
	ld	hl, 136
	push	hl
	ld	hl, _guess
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	call	_clock
	ld	bc, (_start)
	ld	a, (_start+3)
	call	__lsub
	push	hl
	pop	bc
	ld	a, e
	call	__ultof
	or	a, a
	sbc	hl, hl
	ld	e, 56
	call	__fmul
	push	bc
	pop	hl
	ld	e, a
	ld	bc, (_timer_seconds)
	ld	a, (_timer_seconds+3)
	call	__fsub
	ld	(_difference), bc
	ld	hl, (ix - 21)
	ld	(hl), a
	ld	hl, -8187281
	ld	e, 58
	call	__fcmp
	ld	e, 1
	jp	p, BB11_21
	ld	e, 0
BB11_21:
	bit	0, e
	ld	hl, 0
	jr	nz, BB11_23
	push	bc
	pop	hl
BB11_23:
	bit	0, e
	ld	e, 0
	jr	nz, BB11_25
	ld	e, a
BB11_25:
	push	de
	push	hl
	ld	hl, (ix - 15)
	push	hl
	call	_os_FloatToReal
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 2
	push	hl
	dec	hl
	push	hl
	ld	hl, 8
	push	hl
	ld	hl, (ix - 15)
	push	hl
	ld	hl, _timerDisp
	push	hl
	call	_os_RealToStr
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	scf
	sbc	hl, hl
	push	hl
	call	_gfx_SetTextFGColor
	pop	hl
	ld	a, (_header)
	ld	l, a
	push	hl
	call	_gfx_SetTextBGColor
	pop	hl
	ld	hl, (_difference)
	ld	a, (_difference+3)
	ld	e, a
	ld	bc, 2097152
	ld	a, 65
	call	__fcmp
	jp	p, BB11_27
	ld	hl, 6
	push	hl
	push	hl
	ld	hl, _.str.9
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_header)
	ld	l, a
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, 8
	push	hl
	ld	hl, 10
	push	hl
	ld	hl, 6
	push	hl
	ld	hl, 38
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (_difference)
	ld	a, (_difference+3)
	ld	e, a
BB11_27:
	ld	bc, 2097152
	ld	a, 65
	call	__fcmp
	ld	a, 1
	jp	m, BB11_29
	ld	a, 0
BB11_29:
	ld	hl, (_digitShift)
	ld	de, 6
	add	hl, de
	bit	0, a
	jr	nz, BB11_31
	push	de
	pop	hl
BB11_31:
	push	de
	push	hl
	ld	hl, _timerDisp
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ld	bc, (_difference)
	ld	a, (_difference+3)
	or	a, a
	sbc	hl, hl
	ld	e, h
	call	__fcmp
	jp	m, BB11_1
	jr	BB11_34
BB11_32:
	push	de
	call	_forceQuit
	pop	hl
BB11_33:
	ld	hl, 1
	ld	(_inputLock+54), hl
BB11_34:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_ptypeRemoveItem
_ptypeRemoveItem:
	ld	hl, -15
	call	__frameset
	ld	hl, (ix + 6)
	ld	iy, 0
	ld	de, (_ptypeSize)
	ld	bc, 0
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	m, BB12_8
	ld	hl, (ix + 6)
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	p, BB12_8
	ex	de, hl
	ld	bc, 3
	ld	de, _ptypeState
	ld	(ix - 6), de
	dec	hl
	ld	(ix - 12), hl
	ld	de, (ix + 6)
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	push	de
	pop	hl
	jp	m, BB12_4
	ld	hl, (ix - 12)
BB12_4:
	or	a, a
	sbc	hl, de
	ld	(ix - 3), hl
	push	de
	pop	hl
	call	__imulu
	push	hl
	pop	bc
	ld	(ix - 15), bc
	ld	hl, (ix - 6)
	add	hl, bc
	ld	(ix - 6), hl
	ld	c, 2
	ex	de, hl
	call	__ishl
	push	hl
	pop	de
	ld	hl, _ptypeWeights
	push	hl
	pop	iy
	add	iy, de
	lea	hl, iy + 4
	ld	(ix - 9), hl
	ld	iy, _ptypeProblems
	ld	de, (ix - 15)
	add	iy, de
	ld	bc, (ix - 12)
BB12_5:
	ld	hl, (ix - 3)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB12_7
	lea	hl, iy + 3
	ld	(ix - 12), hl
	ld	de, (iy + 3)
	ld	(iy), de
	ld	iy, (ix - 9)
	ld	de, (iy)
	ld	a, (iy + 3)
	ld	(iy - 4), de
	ld	(iy - 1), a
	ld	hl, (ix - 6)
	push	hl
	pop	iy
	lea	de, iy + 3
	ld	(ix - 15), de
	push	bc
	pop	de
	ld	bc, (iy + 3)
	ld	(hl), bc
	push	de
	pop	bc
	ld	hl, (ix - 3)
	dec	hl
	ld	(ix - 3), hl
	ld	iy, (ix - 9)
	lea	iy, iy + 4
	ld	(ix - 9), iy
	ld	iy, (ix - 12)
	ld	hl, (ix - 15)
	ld	(ix - 6), hl
	jr	BB12_5
BB12_7:
	ld	(_ptypeSize), bc
	ld	iy, 1
BB12_8:
	lea	hl, iy
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_configSelection
_configSelection:
	ld	hl, -18
	call	__frameset
	ld	de, (_ptypeSelection)
	ld	bc, 9
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	p, BB13_2
	ld	hl, (ix + 9)
	ld	iy, _ptypeName
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	ld	(ix - 6), iy
	ld	hl, (iy)
	push	hl
	call	_gfx_GetStringWidth
	pop	de
	ld	c, 1
	call	__ishru
	ld	(ix - 15), hl
	ld	hl, (ix + 9)
	ld	bc, 12
	call	__imulu
	ld	(ix - 3), hl
	ld	hl, (ix - 6)
	ld	hl, (hl)
	push	hl
	call	_gfx_GetStringWidth
	pop	de
	ld	c, 1
	call	__ishru
	ld	(ix - 12), hl
	ld	a, (ix + 6)
	ld	l, a
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, 150
	ld	de, (ix - 15)
	or	a, a
	sbc	hl, de
	ld	(ix - 18), hl
	ld	iy, (ix - 3)
	lea	hl, iy
	ld	bc, 46
	add	hl, bc
	ld	(ix - 6), hl
	lea	hl, iy
	ld	bc, 42
	add	hl, bc
	ld	(ix - 9), hl
	ld	hl, 154
	or	a, a
	sbc	hl, de
	ld	bc, 44
	add	iy, bc
	ld	(ix - 3), iy
	push	iy
	push	hl
	ld	hl, (ix - 9)
	push	hl
	ld	de, (ix - 18)
	push	de
	ld	hl, (ix - 6)
	push	hl
	push	de
	call	_gfx_FillTriangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix - 12)
	push	hl
	pop	iy
	ld	de, 166
	add	iy, de
	ld	de, 162
	add	hl, de
	ld	de, (ix - 3)
	push	de
	push	hl
	ld	hl, (ix - 9)
	push	hl
	push	iy
	ld	hl, (ix - 6)
	push	hl
	push	iy
	call	_gfx_FillTriangle
	ld	bc, 9
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	de, (_ptypeSelection)
BB13_2:
	ex	de, hl
	or	a, a
	sbc	hl, bc
	jr	nz, BB13_4
	ld	hl, 0
	jr	BB13_5
BB13_4:
	ld	hl, -1
BB13_5:
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, 16
	push	hl
	ld	hl, 64
	push	hl
	ld	hl, 176
	push	hl
	ld	hl, 128
	push	hl
	call	_gfx_Rectangle
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_redrawConfigMenu
_redrawConfigMenu:
	ld	hl, -12
	call	__frameset
	ld	iy, _ptypeState
	ld	hl, 44
	ld	bc, _ptypeName
BB14_1:
	ld	de, 152
	ld	(ix - 3), hl
	or	a, a
	sbc	hl, de
	jp	z, BB14_5
	push	bc
	pop	hl
	ld	(ix - 9), hl
	ld	de, (hl)
	ld	hl, (ix - 3)
	ld	bc, -4
	add	hl, bc
	push	hl
	push	de
	ld	(ix - 6), iy
	call	_printCentered
	pop	hl
	pop	hl
	ld	hl, (ix - 6)
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB14_4
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, (ix - 9)
	ld	de, (hl)
	push	de
	call	_gfx_GetStringWidth
	pop	de
	ld	a, 1
	ld	c, a
	call	__ishru
	push	hl
	pop	de
	ld	hl, 160
	or	a, a
	sbc	hl, de
	ld	(ix - 12), hl
	ld	hl, (ix - 9)
	ld	hl, (hl)
	push	hl
	call	_gfx_GetStringWidth
	pop	de
	ld	c, 1
	call	__ishru
	ld	de, 160
	add	hl, de
	ld	de, (ix - 3)
	push	de
	push	hl
	push	de
	ld	hl, (ix - 12)
	push	hl
	call	_gfx_Line
	pop	hl
	pop	hl
	pop	hl
	pop	hl
BB14_4:
	ld	iy, (ix - 9)
	lea	iy, iy + 3
	lea	bc, iy
	ld	de, 12
	ld	hl, (ix - 3)
	add	hl, de
	ld	iy, (ix - 6)
	lea	iy, iy + 3
	jp	BB14_1
BB14_5:
	ld	hl, 180
	push	hl
	ld	hl, _.str.24
	push	hl
	call	_printCentered
	pop	hl
	pop	hl
	ld	hl, (_ptypeSelection)
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	call	_configSelection
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_configMenu
_configMenu:
BB15_1:
	call	_kb_Scan
	ld	hl, -720868
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	ld	(_key6), a
	ld	iy, -720866
	push	hl
	ld	l, (iy)
	ld	h, (iy + 1)
	ex	(sp), hl
	pop	iy
	ld	a, iyl
	ld	(_key7), a
	ld.sis	bc, 1
	call	__sand
	ld	e, l
	ld	d, h
	bit	0, e
	jr	z, BB15_7
	ld	hl, (_inputLock+54)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB15_7
	ld	hl, 1
	ld	(_inputLock+54), hl
	ld	de, (_ptypeSelection)
	push	de
	pop	hl
	ld	bc, 9
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	p, BB15_25
	ex	de, hl
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	iy, _ptypeState
	add	iy, de
	ld	hl, (iy)
	ld	de, 1
	or	a, a
	sbc	hl, de
	ex	de, hl
	jr	nz, BB15_6
	ld	hl, 0
BB15_6:
	ld	(iy), hl
	call	_redrawConfigMenu
	ld	a, (_key7)
	ld	iyl, a
	jr	BB15_9
BB15_7:
	bit	0, e
	jr	nz, BB15_9
	or	a, a
	sbc	hl, hl
	ld	(_inputLock+54), hl
BB15_9:
	ld	a, iyl
	and	a, 8
	ld	e, a
	or	a, a
	jr	z, BB15_13
	ld	hl, (_inputLock+36)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB15_13
	ld	hl, (_ptypeSelection)
	push	hl
	ld	hl, 255
	push	hl
	call	_configSelection
	pop	hl
	pop	hl
	ld	de, (_ptypeSelection)
	push	de
	pop	hl
	ld	bc, 1
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	p, BB15_15
	ld	de, 8
	jr	BB15_16
BB15_13:
	ld	a, e
	or	a, a
	jr	nz, BB15_17
	or	a, a
	sbc	hl, hl
	ld	(_inputLock+36), hl
	jr	BB15_17
BB15_15:
	dec	de
BB15_16:
	ld	(_ptypeSelection), de
	call	_redrawConfigMenu
	ld	hl, 1
	ld	(_inputLock+36), hl
	ld	a, (_key7)
	ld	iyl, a
BB15_17:
	ld	a, iyl
	and	a, 1
	bit	0, a
	jr	z, BB15_21
	ld	hl, (_inputLock+39)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB15_21
	ld	hl, (_ptypeSelection)
	push	hl
	ld	hl, 255
	push	hl
	call	_configSelection
	pop	hl
	pop	hl
	ld	de, (_ptypeSelection)
	push	de
	pop	hl
	ld	bc, 9
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	m, BB15_22
	ld	de, 0
	jr	BB15_23
BB15_21:
	bit	0, a
	ld	hl, 0
	jp	nz, BB15_1
	jr	BB15_24
BB15_22:
	inc	de
BB15_23:
	ld	(_ptypeSelection), de
	call	_redrawConfigMenu
	ld	hl, 1
BB15_24:
	ld	(_inputLock+39), hl
	jp	BB15_1
BB15_25:
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_fairFactors
_fairFactors:
	ld	hl, -6
	call	__frameset
	ld	bc, (ix + 6)
	ld	iy, 0
	ld	de, -2
	ld	(_factorsSize), iy
	push	bc
	pop	hl
	add	hl, de
	ld	de, 4
	or	a, a
	sbc	hl, de
	jr	nc, BB16_3
	call	_random
	ld	bc, 1
	xor	a, a
	call	__land
	ld	iy, (_factorsSize)
	bit	0, l
	jp	nz, BB16_16
	ld	bc, (ix + 6)
BB16_3:
	ld	(ix - 3), iy
	ld	de, 2
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	push	bc
	pop	iy
	dec	de
	jp	p, BB16_8
	push	de
	pop	iy
	jr	BB16_8
BB16_5:
	ld	(ix - 6), iy
	push	bc
	pop	hl
	push	de
	pop	bc
	call	__irems
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB16_7
	ld	iy, (ix - 3)
	lea	hl, iy
	ld	bc, 3
	call	__imulu
	push	hl
	pop	bc
	ld	hl, _factors
	add	hl, bc
	ld	(hl), de
	inc	iy
	ld	(ix - 3), iy
	ld	(_factorsSize), iy
BB16_7:
	ld	bc, (ix + 6)
	ld	iy, (ix - 6)
	inc	de
BB16_8:
	lea	hl, iy
	or	a, a
	sbc	hl, de
	jr	nz, BB16_5
	ld	de, 12
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	push	bc
	pop	iy
	jp	p, BB16_11
	ld	iy, 11
BB16_11:
	push	bc
	pop	de
BB16_12:
	lea	hl, iy
	or	a, a
	sbc	hl, de
	jr	z, BB16_15
	inc	de
	push	de
	pop	hl
	ld	bc, (ix + 6)
	call	__irems
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB16_12
	ld	(ix - 6), iy
	ld	iy, (ix - 3)
	lea	hl, iy
	ld	bc, 3
	call	__imulu
	push	hl
	pop	bc
	ld	hl, _factors
	add	hl, bc
	ld	(hl), de
	inc	iy
	ld	(ix - 3), iy
	ld	(_factorsSize), iy
	ld	iy, (ix - 6)
	jr	BB16_12
BB16_15:
	ld	iy, 1
	jr	BB16_25
BB16_16:
	ld	(ix - 3), iy
	ld	iy, 2
	ld	bc, (ix + 6)
BB16_17:
	lea	hl, iy
	ld	de, 6
	or	a, a
	sbc	hl, de
	jr	z, BB16_24
	push	bc
	pop	hl
	lea	de, iy
	or	a, a
	sbc	hl, de
	jr	z, BB16_23
	lea	hl, iy
	call	__irems
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB16_21
	ld	hl, (ix + 6)
	lea	bc, iy
	call	__irems
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB16_22
BB16_21:
	ld	de, (ix - 3)
	push	de
	pop	hl
	ld	bc, 3
	call	__imulu
	push	hl
	pop	bc
	ld	hl, _factors
	add	hl, bc
	lea	bc, iy
	ld	(hl), bc
	inc	de
	ld	(ix - 3), de
	ld	(_factorsSize), de
BB16_22:
	ld	bc, (ix + 6)
BB16_23:
	inc	iy
	jr	BB16_17
BB16_24:
	ld	iy, 2
BB16_25:
	ld	(_scoreBonus), iy
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_gcd
_gcd:
	call	__frameset0
	ld	de, (ix + 6)
	ld	bc, (ix + 9)
BB17_1:
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB17_3
	ex	de, hl
	call	__irems
	push	bc
	pop	de
	push	hl
	pop	bc
	jr	BB17_1
BB17_3:
	ex	de, hl
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_lcm
_lcm:
	call	__frameset0
	ld	de, (ix + 6)
	ld	iy, (ix + 9)
	lea	bc, iy
BB18_1:
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB18_3
	ex	de, hl
	call	__irems
	push	bc
	pop	de
	push	hl
	pop	bc
	jr	BB18_1
BB18_3:
	lea	hl, iy
	ld	bc, (ix + 6)
	call	__imulu
	push	de
	pop	bc
	call	__idivs
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_arithmetic
_arithmetic:
	ld	hl, -9
	call	__frameset
	call	_random
	ld	bc, 81
	call	__iremu
	ld	de, 20
	add	hl, de
	ld	(ix - 3), hl
	call	_random
	ld	bc, 81
	call	__iremu
	ld	(ix - 6), hl
	push	hl
	pop	iy
	ld	de, 20
	add	iy, de
	ld	(ix - 9), iy
	ld	e, (ix + 6)
	ld	a, e
	rlc	a
	sbc	hl, hl
	ld	l, e
	push	iy
	push	hl
	ld	hl, (ix - 3)
	push	hl
	ld	hl, _.str.25
	push	hl
	ld	hl, 17
	push	hl
	ld	hl, _problem
	push	hl
	call	_snprintf
	ld	iy, (ix - 9)
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, -20
	ld	de, (ix - 6)
	or	a, a
	sbc	hl, de
	ld	a, (ix + 6)
	cp	a, 43
	jr	z, BB19_2
	push	hl
	pop	iy
BB19_2:
	ld	de, (ix - 3)
	add	iy, de
	push	iy
	ld	hl, _.str.26
	push	hl
	ld	hl, 7
	push	hl
	ld	hl, _answer
	push	hl
	call	_snprintf
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_multiplication
_multiplication:
	ld	hl, -6
	call	__frameset
	call	_random
	ld	bc, 13
	call	__iremu
	ld	de, 2
	add	hl, de
	ld	(ix - 3), hl
	call	_random
	ld	bc, 13
	call	__iremu
	ld	de, 2
	add	hl, de
	ld	(ix - 6), hl
	push	hl
	ld	hl, (ix - 3)
	push	hl
	ld	hl, _.str.27
	push	hl
	ld	hl, 17
	push	hl
	ld	hl, _problem
	push	hl
	call	_snprintf
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix - 6)
	ld	bc, (ix - 3)
	call	__imulu
	push	hl
	ld	hl, _.str.26
	push	hl
	ld	hl, 7
	push	hl
	ld	hl, _answer
	push	hl
	call	_snprintf
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_division
_division:
	ld	hl, -6
	call	__frameset
	call	_random
	ld	bc, 13
	call	__iremu
	ld	de, 2
	add	hl, de
	ld	(ix - 3), hl
	call	_random
	ld	bc, 13
	call	__iremu
	ld	de, 2
	add	hl, de
	ld	(ix - 6), hl
	ld	bc, (ix - 3)
	call	__imulu
	ld	de, (ix - 3)
	push	de
	push	hl
	ld	hl, _.str.28
	push	hl
	ld	hl, 17
	push	hl
	ld	hl, _problem
	push	hl
	call	_snprintf
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix - 6)
	push	hl
	ld	hl, _.str.26
	push	hl
	ld	hl, 7
	push	hl
	ld	hl, _answer
	push	hl
	call	_snprintf
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_factorial
_factorial:
	ld	hl, -6
	call	__frameset
	ld	hl, 1
	ld	(ix - 6), hl
	call	_random
	ld	bc, 3
	call	__iand
	ld	(ix - 3), hl
	push	hl
	pop	iy
	ld	de, 3
	add	iy, de
	push	iy
	ld	hl, _.str.29
	push	hl
	ld	hl, 17
	push	hl
	ld	hl, _problem
	push	hl
	call	_snprintf
	ld	bc, 2
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	de, 4
	ld	hl, (ix - 3)
	add	hl, de
	ld	(ix - 3), hl
BB22_1:
	ld	hl, (ix - 3)
	push	bc
	pop	de
	or	a, a
	sbc	hl, de
	jr	z, BB22_3
	push	bc
	pop	de
	push	de
	pop	hl
	ld	bc, (ix - 6)
	call	__imulu
	ld	(ix - 6), hl
	inc	de
	push	de
	pop	bc
	jr	BB22_1
BB22_3:
	ld	hl, (ix - 6)
	push	hl
	ld	hl, _.str.26
	push	hl
	ld	hl, 7
	push	hl
	ld	hl, _answer
	push	hl
	call	_snprintf
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_arithmeticFraction
_arithmeticFraction:
	ld	hl, -12
	call	__frameset
	call	_random
	ld	bc, 11
	call	__iremu
	ld	(ix - 9), hl
	call	_random
	ld	iy, (ix - 9)
	ld	bc, 12
	call	__iremu
	inc	hl
	ld	(ix - 6), hl
BB23_1:
	inc	iy
	lea	de, iy
BB23_2:
	push	hl
	pop	bc
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB23_4
	ex	de, hl
	call	__irems
	push	bc
	pop	de
	jr	BB23_2
BB23_4:
	ex	de, hl
	ld	de, 2
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	ld	hl, (ix - 6)
	jp	p, BB23_1
	push	hl
	ld	(ix - 9), iy
	call	_fairFactors
	pop	hl
	call	_random
	ld	bc, 11
	call	__iremu
	ld	(ix - 3), hl
	ld	hl, (_factorsSize)
	push	hl
	ld	hl, _factors
	push	hl
	call	_randIntArray
	ld	de, (ix - 3)
	push	hl
	pop	bc
	pop	hl
	pop	hl
BB23_6:
	inc	de
	ld	(ix - 3), de
	push	bc
	pop	iy
BB23_7:
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB23_9
	ex	de, hl
	call	__irems
	push	bc
	pop	de
	push	hl
	pop	bc
	jr	BB23_7
BB23_9:
	ex	de, hl
	ld	de, 2
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	ld	de, (ix - 3)
	lea	bc, iy
	jp	p, BB23_6
	xor	a, a
	ld	(_problem), a
	ld	hl, 1
	ld	(_problemDispType), hl
	ld	hl, (ix - 9)
	push	hl
	ld	hl, _.str.22
	push	hl
	ld	hl, 4
	push	hl
	ld	hl, _problemDispTerm
	push	hl
	ld	(ix - 12), bc
	call	_snprintf
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix - 6)
	push	hl
	ld	hl, _.str.22
	push	hl
	ld	hl, 4
	push	hl
	ld	hl, _problemDispTerm+4
	push	hl
	call	_snprintf
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix - 3)
	push	hl
	ld	hl, _.str.22
	push	hl
	ld	hl, 4
	push	hl
	ld	hl, _problemDispTerm+8
	push	hl
	call	_snprintf
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix - 12)
	push	hl
	ld	hl, _.str.22
	push	hl
	ld	hl, 4
	push	hl
	ld	hl, _problemDispTerm+12
	push	hl
	call	_snprintf
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	e, (ix + 6)
	ld	a, e
	rlc	a
	sbc	hl, hl
	ld	l, e
	push	hl
	ld	hl, _.str.30
	push	hl
	ld	hl, 2
	push	hl
	ld	hl, _problemDispOperation
	push	hl
	call	_snprintf
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	de, (ix - 6)
	ld	(_problemTerm), de
	ld	hl, (ix - 12)
	ld	(_problemTerm+3), hl
	push	hl
	push	de
	call	_lcm
	push	hl
	pop	de
	pop	hl
	pop	hl
	push	de
	pop	hl
	ld	bc, (ix - 6)
	call	__idivs
	ld	bc, (ix - 9)
	call	__imulu
	ld	(ix - 9), hl
	ld	(ix - 6), de
	ex	de, hl
	ld	bc, (ix - 12)
	call	__idivs
	ld	bc, (ix - 3)
	call	__imulu
	push	hl
	pop	iy
	call	__ineg
	ld	a, (ix + 6)
	cp	a, 43
	jr	z, BB23_12
	push	hl
	pop	iy
BB23_12:
	ld	de, (ix - 9)
	add	iy, de
	lea	hl, iy
	lea	de, iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	bc
	ld	(ix - 3), de
	ex	de, hl
	add	hl, bc
	call	__ixor
	push	hl
	pop	bc
	ld	iy, (ix - 6)
	lea	de, iy
BB23_13:
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB23_15
	push	bc
	pop	hl
	push	de
	pop	bc
	call	__irems
	ex	de, hl
	jr	BB23_13
BB23_15:
	push	bc
	pop	hl
	ld	de, 2
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	m, BB23_17
	ld	hl, (_scoreBonus)
	inc	hl
	ld	(_scoreBonus), hl
BB23_17:
	ld	hl, (ix - 3)
	call	__idivs
	ld	(ix - 3), hl
	lea	hl, iy
	call	__idivs
	push	hl
	pop	bc
	ld	de, 1
	or	a, a
	sbc	hl, de
	jr	nz, BB23_19
	ld	hl, (ix - 3)
	push	hl
	ld	hl, _.str.26
	push	hl
	ld	hl, 7
	push	hl
	ld	hl, _answer
	push	hl
	call	_snprintf
	jr	BB23_20
BB23_19:
	push	bc
	ld	hl, (ix - 3)
	push	hl
	ld	hl, _.str.31
	push	hl
	ld	hl, 7
	push	hl
	ld	hl, _answer
	push	hl
	call	_snprintf
	pop	hl
BB23_20:
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_exponentiation
_exponentiation:
	ld	hl, -6
	call	__frameset
	ld	bc, 2
	ld	hl, 9
	ld	de, _BASEWEIGHTS
	push	de
	push	hl
	push	bc
	call	_randIntWeighted
	ld	(ix - 3), hl
	pop	hl
	pop	hl
	pop	hl
	call	_random
	push	hl
	pop	de
	ld	hl, (ix - 3)
	ld	bc, -2
	add	hl, bc
	ld	bc, 3
	call	__imulu
	push	hl
	pop	bc
	ld	hl, _EXPMAX
	add	hl, bc
	ld	iy, (hl)
	ld	bc, -2
	add	iy, bc
	ex	de, hl
	lea	bc, iy
	call	__iremu
	ld	de, 3
	add	hl, de
	ld	(ix - 6), hl
	xor	a, a
	ld	(_problem), a
	ld	hl, 2
	ld	(_problemDispType), hl
	ld	hl, (ix - 3)
	push	hl
	ld	hl, _.str.22
	push	hl
	ld	hl, 4
	push	hl
	ld	hl, _problemDispTerm
	push	hl
	call	_snprintf
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix - 6)
	push	hl
	ld	hl, _.str.22
	push	hl
	ld	hl, 4
	push	hl
	ld	hl, _problemDispTerm+4
	push	hl
	call	_snprintf
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix - 6)
	push	hl
	ld	hl, (ix - 3)
	push	hl
	call	_powInt
	pop	de
	pop	de
	push	hl
	ld	hl, _.str.22
	push	hl
	ld	hl, 7
	push	hl
	ld	hl, _answer
	push	hl
	call	_snprintf
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_exponentiationInverse
_exponentiationInverse:
	ld	hl, -6
	call	__frameset
	ld	hl, 2
	ld	de, 9
	ld	bc, _BASEWEIGHTS
	push	bc
	push	de
	push	hl
	call	_randIntWeighted
	ld	(ix - 3), hl
	pop	hl
	pop	hl
	pop	hl
	call	_random
	push	hl
	pop	de
	ld	hl, (ix - 3)
	ld	bc, -2
	add	hl, bc
	ld	bc, 3
	call	__imulu
	push	hl
	pop	bc
	ld	hl, _EXPMAX
	add	hl, bc
	ld	iy, (hl)
	ld	bc, -2
	add	iy, bc
	ex	de, hl
	lea	bc, iy
	call	__iremu
	ld	de, 3
	add	hl, de
	ld	(ix - 6), hl
	xor	a, a
	ld	(_problem), a
	ld	(_problemDispType), de
	push	hl
	ld	hl, (ix - 3)
	push	hl
	call	_powInt
	pop	de
	pop	de
	push	hl
	ld	hl, _.str.22
	push	hl
	ld	hl, 4
	push	hl
	ld	hl, _problemDispTerm
	push	hl
	call	_snprintf
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix - 6)
	push	hl
	ld	hl, _.str.22
	push	hl
	ld	hl, 4
	push	hl
	ld	hl, _problemDispTerm+4
	push	hl
	call	_snprintf
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix - 3)
	push	hl
	ld	hl, _.str.26
	push	hl
	ld	hl, 7
	push	hl
	ld	hl, _answer
	push	hl
	call	_snprintf
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_generateProblem
_generateProblem:
	ld	hl, _ptypeProblems
	ld	de, (_ptypeSize)
	push	de
	push	hl
	call	_randIntArray
	push	hl
	pop	de
	pop	hl
	pop	hl
	ld	bc, 9
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jr	c, BB26_2
	ret
BB26_2:
	ld	hl, JTI26_0
	add	hl, de
	add	hl, de
	add	hl, de
	ld	hl, (hl)
	jp	(hl)
BB26_3:
	ld	hl, 43
	jr	BB26_5
BB26_4:
	ld	hl, 45
BB26_5:
	push	hl
	call	_arithmetic
	jr	BB26_12
BB26_6:
	call	_multiplication
	ret
BB26_7:
	call	_division
	ret
BB26_8:
	call	_factorial
	ret
BB26_9:
	ld	hl, 43
	jr	BB26_11
BB26_10:
	ld	hl, 45
BB26_11:
	push	hl
	call	_arithmeticFraction
BB26_12:
	pop	hl
	ret
BB26_13:
	call	_exponentiation
	ret
BB26_14:
	call	_exponentiationInverse
	ret
	section	.text,"ax",@progbits
	section	.rodata,"a",@progbits
	private	JTI26_0
JTI26_0:
	dl	BB26_3
	dl	BB26_4
	dl	BB26_6
	dl	BB26_7
	dl	BB26_8
	dl	BB26_9
	dl	BB26_10
	dl	BB26_13
	dl	BB26_14

	section	.text,"ax",@progbits
	public	_main
_main:
	ld	hl, -3
	call	__frameset
	ld	hl, 0
	ld	de, _ptypeProblems
	ld	(ix - 3), de
	push	hl
	call	_time
	pop	de
	push	hl
	call	_srand
	ld	iy, 0
	pop	hl
	ld	bc, 9
	lea	de, iy
BB27_1:
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jr	z, BB27_3
	lea	hl, iy
	ld	iy, (ix - 3)
	ld	(iy), de
	inc	de
	lea	iy, iy + 3
	ld	(ix - 3), iy
	push	hl
	pop	iy
	jr	BB27_1
BB27_3:
	ld	de, 36
	lea	bc, iy
BB27_4:
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jr	z, BB27_6
	push	bc
	pop	de
	ld	iy, _ptypeWeights
	add	iy, bc
	ld	hl, -2013266
	ld	(iy), hl
	ld	(iy + 3), 61
	ld	iy, 0
	ld	bc, 4
	ex	de, hl
	ld	de, 36
	add	hl, bc
	push	hl
	pop	bc
	jr	BB27_4
BB27_6:
	ld	de, 27
BB27_7:
	lea	hl, iy
	or	a, a
	sbc	hl, de
	jr	z, BB27_9
	lea	bc, iy
	ld	hl, _ptypeState
	add	hl, bc
	ld	bc, 1
	ld	(hl), bc
	ld	bc, 3
	add	iy, bc
	jr	BB27_7
BB27_9:
	ld	hl, (_appvar)
	ld	de, _.str.32
	push	de
	push	hl
	call	_ti_Open
	pop	hl
	pop	hl
	ld	(_var), a
	or	a, a
	jr	nz, BB27_11
	ld	hl, (_appvar)
	ld	de, _.str.33
	push	de
	push	hl
	call	_ti_Open
	ld	l, a
	pop	de
	pop	de
	ld	(_var), a
	push	hl
	ld	hl, 9
	push	hl
	ld	hl, 3
	push	hl
	ld	hl, _ptypeState
	push	hl
	call	_ti_Write
	pop	de
	pop	de
	pop	de
	pop	de
	ld	de, 9
	or	a, a
	sbc	hl, de
	jp	nz, BB27_17
BB27_11:
	ld	hl, (_appvar)
	ld	de, _.str.32
	push	de
	push	hl
	call	_ti_Open
	ld	l, a
	pop	de
	pop	de
	ld	(_var), a
	push	hl
	ld	hl, 9
	push	hl
	ld	hl, 3
	push	hl
	ld	hl, _ptypeState
	push	hl
	call	_ti_Read
	pop	de
	pop	de
	pop	de
	pop	de
	ld	de, 9
	or	a, a
	sbc	hl, de
	jr	nz, BB27_15
	call	_gfx_Begin
	ld	hl, -33
	push	hl
	call	_gfx_SetTextTransparentColor
	pop	hl
	scf
	sbc	hl, hl
	push	hl
	call	_gfx_FillScreen
	pop	hl
	call	_redrawConfigMenu
	call	_configMenu
	ld	hl, (_appvar)
	ld	de, _.str.33
	push	de
	push	hl
	call	_ti_Open
	ld	l, a
	pop	de
	pop	de
	ld	(_var), a
	push	hl
	ld	hl, 9
	push	hl
	ld	hl, 3
	push	hl
	ld	hl, _ptypeState
	push	hl
	call	_ti_Write
	pop	de
	pop	de
	pop	de
	pop	de
	ld	de, 9
	or	a, a
	sbc	hl, de
	jr	nz, BB27_14
	call	_ptypeAllOff
	bit	0, a
	jr	z, BB27_21
BB27_14:
	ld	hl, (_appvar)
	push	hl
	call	_ti_Delete
	pop	hl
	ld	hl, 1
	push	hl
	call	_forceQuit
	pop	hl
BB27_15:
	ld	hl, _.str.35
	push	hl
	call	_os_PutStrFull
	pop	hl
BB27_16:
	call	_os_GetCSC
	or	a, a
	jr	z, BB27_16
	jr	BB27_19
BB27_17:
	ld	hl, _.str.34
	push	hl
	call	_os_PutStrFull
	pop	hl
BB27_18:
	call	_os_GetCSC
	or	a, a
	jr	z, BB27_18
BB27_19:
	ld	hl, 1
BB27_20:
	ld	sp, ix
	pop	ix
	ret
BB27_21:
	ld	de, (_ptypeSize)
	ld	bc, 0
BB27_22:
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	p, BB27_27
	push	de
	pop	iy
	push	bc
	pop	hl
	push	bc
	pop	de
	ld	bc, 3
	call	__imulu
	push	hl
	pop	bc
	ld	hl, _ptypeState
	add	hl, bc
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB27_25
	push	de
	ld	(ix - 3), de
	call	_ptypeRemoveItem
	pop	hl
	ld	bc, (ix - 3)
	dec	bc
	ld	de, (_ptypeSize)
	jr	BB27_26
BB27_25:
	push	de
	pop	bc
	lea	de, iy
BB27_26:
	inc	bc
	jr	BB27_22
BB27_27:
	scf
	sbc	hl, hl
	push	hl
	call	_gfx_FillScreen
	pop	hl
	ld	hl, 1
	push	hl
	push	hl
	call	_gfx_SetTextScale
	pop	hl
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, 16
	push	hl
	ld	hl, 56
	push	hl
	ld	hl, 116
	push	hl
	ld	hl, 132
	push	hl
	call	_gfx_Rectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_header)
	ld	l, a
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, 20
	push	hl
	ld	hl, 320
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	call	_clock
	ld	a, e
	ld	(_start), hl
	ld	(_start+3), a
	ld	e, 0
BB27_28:
	ld	a, e
	ld	(_problem), a
	call	_generateProblem
	call	_redrawScreen
	call	_textEntry
	ld	hl, _answer
	push	hl
	ld	hl, _guess
	push	hl
	call	_strcmp
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB27_30
	ld	iy, (_scoreBonus)
	inc	iy
	ld	de, (_score)
	add	iy, de
	jr	BB27_32
BB27_30:
	ld	iy, (_score)
	lea	hl, iy
	ld	de, 1
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	m, BB27_33
	dec	iy
BB27_32:
	ld	(_score), iy
BB27_33:
	or	a, a
	sbc	hl, hl
	ld	(_scoreBonus), hl
	ld	(_problemDispType), hl
	call	_clearGuess
	ld	bc, (_difference)
	ld	a, (_difference+3)
	or	a, a
	sbc	hl, hl
	ld	e, h
	call	__fcmp
	jp	m, BB27_28
	scf
	sbc	hl, hl
	push	hl
	call	_gfx_FillScreen
	pop	hl
	ld	hl, 80
	push	hl
	ld	hl, _.str.36
	push	hl
	call	_printCentered
	pop	hl
	pop	hl
	ld	hl, 120
	push	hl
	ld	hl, _scoreDisp
	push	hl
	call	_printCentered
	pop	hl
	pop	hl
	ld	a, (_var)
	ld	l, a
	push	hl
	call	_ti_Close
	pop	hl
	xor	a, a
	ld	(_var), a
BB27_35:
	call	_os_GetCSC
	or	a, a
	jr	z, BB27_35
	call	_gfx_End
	or	a, a
	sbc	hl, hl
	jp	BB27_20
	section	.text,"ax",@progbits

	section	.rodata,"a",@progbits
	public	_ADD
_ADD:
	db	43

	section	.rodata,"a",@progbits
	public	_SUB
_SUB:
	db	45

	section	.rodata,"a",@progbits
	public	_ADDMIN
_ADDMIN:
	dl	20

	section	.rodata,"a",@progbits
	public	_ADDMAX
_ADDMAX:
	dl	100

	section	.rodata,"a",@progbits
	public	_MULTMIN
_MULTMIN:
	dl	2

	section	.rodata,"a",@progbits
	public	_MULTMAX
_MULTMAX:
	dl	14

	section	.rodata,"a",@progbits
	public	_FACTMIN
_FACTMIN:
	dl	3

	section	.rodata,"a",@progbits
	public	_FACTMAX
_FACTMAX:
	dl	6

	section	.rodata,"a",@progbits
	public	_DENMIN
_DENMIN:
	dl	1

	section	.rodata,"a",@progbits
	public	_DENMAX
_DENMAX:
	dl	12

	section	.rodata,"a",@progbits
	public	_NUMMIN
_NUMMIN:
	dl	1

	section	.rodata,"a",@progbits
	public	_NUMMAX
_NUMMAX:
	dl	11

	section	.bss,"aw",@nobits
	public	_factorsSize
_factorsSize:
	rb	3

	section	.rodata,"a",@progbits
	public	_BASEMIN
_BASEMIN:
	dl	2

	section	.rodata,"a",@progbits
	public	_BASEMAX
_BASEMAX:
	dl	9

	section	.rodata,"a",@progbits
	public	_BASEWEIGHTS
_BASEWEIGHTS:
	dd	0x3e99999a
	dd	0x3e23d70a
	dd	0x3e051eb8
	dd	0x3e051eb8
	dd	0x3d8f5c29
	dd	0x3d8f5c29
	dd	0x3d8f5c29
	dd	0x3d8f5c29

	section	.rodata,"a",@progbits
	public	_EXPMIN
_EXPMIN:
	dl	3

	section	.rodata,"a",@progbits
	public	_EXPMAX
_EXPMAX:
	dl	8
	dl	4
	dl	4
	dl	4
	dl	3
	dl	3
	dl	3
	dl	3

	section	.data,"aw",@progbits
	public	_ptypeSize
_ptypeSize:
	dl	9

	section	.data,"aw",@progbits
	public	_ptypeSelection
_ptypeSelection:
	dl	9

	section	.rodata,"a",@progbits
	private	_.str
_.str:
	db	"Addition", 0

	section	.rodata,"a",@progbits
	private	_.str.1
_.str.1:
	db	"Subtraction", 0

	section	.rodata,"a",@progbits
	private	_.str.2
_.str.2:
	db	"Multiplication", 0

	section	.rodata,"a",@progbits
	private	_.str.3
_.str.3:
	db	"Division", 0

	section	.rodata,"a",@progbits
	private	_.str.4
_.str.4:
	db	"Factorials", 0

	section	.rodata,"a",@progbits
	private	_.str.5
_.str.5:
	db	"Addition - Fraction", 0

	section	.rodata,"a",@progbits
	private	_.str.6
_.str.6:
	db	"Subtraction - Fraction", 0

	section	.rodata,"a",@progbits
	private	_.str.7
_.str.7:
	db	"Exponentiation", 0

	section	.rodata,"a",@progbits
	private	_.str.8
_.str.8:
	db	"Exponentiation - Inverse", 0

	section	.data,"aw",@progbits
	public	_ptypeName
_ptypeName:
	dl	_.str
	dl	_.str.1
	dl	_.str.2
	dl	_.str.3
	dl	_.str.4
	dl	_.str.5
	dl	_.str.6
	dl	_.str.7
	dl	_.str.8

	section	.rodata,"a",@progbits
	private	_.str.9
_.str.9:
	db	"0", 0

	section	.rodata,"a",@progbits
	private	_.str.10
_.str.10:
	db	"1", 0

	section	.rodata,"a",@progbits
	private	_.str.11
_.str.11:
	db	"2", 0

	section	.rodata,"a",@progbits
	private	_.str.12
_.str.12:
	db	"3", 0

	section	.rodata,"a",@progbits
	private	_.str.13
_.str.13:
	db	"4", 0

	section	.rodata,"a",@progbits
	private	_.str.14
_.str.14:
	db	"5", 0

	section	.rodata,"a",@progbits
	private	_.str.15
_.str.15:
	db	"6", 0

	section	.rodata,"a",@progbits
	private	_.str.16
_.str.16:
	db	"7", 0

	section	.rodata,"a",@progbits
	private	_.str.17
_.str.17:
	db	"8", 0

	section	.rodata,"a",@progbits
	private	_.str.18
_.str.18:
	db	"9", 0

	section	.rodata,"a",@progbits
	private	_.str.19
_.str.19:
	db	"/", 0

	section	.rodata,"a",@progbits
	private	_.str.20
_.str.20:
	db	"-", 0

	section	.data,"aw",@progbits
	public	_character
_character:
	dl	_.str.9
	dl	_.str.10
	dl	_.str.11
	dl	_.str.12
	dl	_.str.13
	dl	_.str.14
	dl	_.str.15
	dl	_.str.16
	dl	_.str.17
	dl	_.str.18
	dl	_.str.19
	dl	_.str.20

	section	.data,"aw",@progbits
	public	_inputMap
_inputMap:
	dw	769
	dw	770
	dw	1026
	dw	1282
	dw	772
	dw	1028
	dw	1284
	dw	776
	dw	1032
	dw	1288
	dw	1552
	dw	1281

	section	.bss,"aw",@nobits
	public	_score
_score:
	rb	3

	section	.bss,"aw",@nobits
	public	_scoreBonus
_scoreBonus:
	rb	3

	section	.rodata,"a",@progbits
	public	_spacingX
_spacingX:
	dl	4

	section	.rodata,"a",@progbits
	public	_spacingY
_spacingY:
	dl	4

	section	.data,"aw",@progbits
	public	_timer_seconds
_timer_seconds:
	dd	0x42b40000

	section	.data,"aw",@progbits
	public	_digitShift
_digitShift:
	dl	8

	section	.data,"aw",@progbits
	public	_header
_header:
	db	74

	section	.rodata,"a",@progbits
	private	_.str.21
_.str.21:
	db	"Zetamac", 0

	section	.data,"aw",@progbits
	public	_appvar
_appvar:
	dl	_.str.21

	section	.bss,"aw",@nobits
	public	_problemDispType
_problemDispType:
	rb	3

	section	.bss,"aw",@nobits
	public	_ptypeState
_ptypeState:
	rb	27

	section	.bss,"aw",@nobits
	public	_factors
_factors:
	rb	24

	section	.bss,"aw",@nobits
	public	_guess
_guess:
	rb	7

	section	.bss,"aw",@nobits
	public	_problem
_problem:
	rb	17

	section	.bss,"aw",@nobits
	public	_problemDispOperation
_problemDispOperation:
	rb	2

	section	.bss,"aw",@nobits
	public	_problemTerm
_problemTerm:
	rb	6

	section	.bss,"aw",@nobits
	public	_problemDispTerm
_problemDispTerm:
	rb	16

	section	.bss,"aw",@nobits
	public	_scoreDisp
_scoreDisp:
	rb	4

	section	.rodata,"a",@progbits
	private	_.str.22
_.str.22:
	db	"%i", 0

	section	.rodata,"a",@progbits
	private	_.str.23
_.str.23:
	db	"V 1.03", 0

	section	.bss,"aw",@nobits
	public	_key1
_key1:
	rb	1

	section	.bss,"aw",@nobits
	public	_key6
_key6:
	rb	1

	section	.bss,"aw",@nobits
	public	_inputLock
_inputLock:
	rb	57

	section	.bss,"aw",@nobits
	public	_start
_start:
	rb	4

	section	.bss,"aw",@nobits
	public	_difference
_difference:
	rb	4

	section	.bss,"aw",@nobits
	public	_ptypeProblems
_ptypeProblems:
	rb	27

	section	.bss,"aw",@nobits
	public	_ptypeWeights
_ptypeWeights:
	rb	36

	section	.rodata,"a",@progbits
	private	_.str.24
_.str.24:
	db	"Start", 0

	section	.bss,"aw",@nobits
	public	_key7
_key7:
	rb	1

	section	.rodata,"a",@progbits
	private	_.str.25
_.str.25:
	db	"%i %c %i", 0

	section	.bss,"aw",@nobits
	public	_answer
_answer:
	rb	7

	section	.rodata,"a",@progbits
	private	_.str.26
_.str.26:
	db	"%d", 0

	section	.rodata,"a",@progbits
	private	_.str.27
_.str.27:
	db	"%i * %i", 0

	section	.rodata,"a",@progbits
	private	_.str.28
_.str.28:
	db	"%i / %i", 0

	section	.rodata,"a",@progbits
	private	_.str.29
_.str.29:
	db	"%i!", 0

	section	.rodata,"a",@progbits
	private	_.str.30
_.str.30:
	db	"%c", 0

	section	.rodata,"a",@progbits
	private	_.str.31
_.str.31:
	db	"%d/%d", 0

	section	.rodata,"a",@progbits
	private	_.str.32
_.str.32:
	db	"r", 0

	section	.bss,"aw",@nobits
	public	_var
_var:
	rb	1

	section	.rodata,"a",@progbits
	private	_.str.33
_.str.33:
	db	"w", 0

	section	.rodata,"a",@progbits
	private	_.str.34
_.str.34:
	db	"Failed write", 0

	section	.rodata,"a",@progbits
	private	_.str.35
_.str.35:
	db	"Failed readback", 0

	section	.rodata,"a",@progbits
	private	_.str.36
_.str.36:
	db	"program completed", 0

	section	.bss,"aw",@nobits
	public	_key3
_key3:
	rb	1

	section	.bss,"aw",@nobits
	public	_key4
_key4:
	rb	1

	section	.bss,"aw",@nobits
	public	_key5
_key5:
	rb	1

	section	.bss,"aw",@nobits
	public	_timerDisp
_timerDisp:
	rb	10

	ident	"clang version 15.0.0 (https://github.com/CE-Programming/llvm-project 23b78267b5d376b232475d0805a937e54b61e0d0)"
	extern	_random
	extern	_gfx_SetTextTransparentColor
	extern	_gfx_SetTextScale
	extern	__Unwind_SjLj_Register
	extern	_srand
	extern	_gfx_SetTextFGColor
	extern	_gfx_Line
	extern	__fadd
	extern	_gfx_Begin
	extern	__sshl
	extern	_rand
	extern	_ti_Close
	extern	_snprintf
	extern	_os_RealToStr
	extern	__sand
	extern	__ishl
	extern	_strlen
	extern	_gfx_FillTriangle
	extern	__idivs
	extern	__setflag
	extern	_ti_Read
	extern	_exit
	extern	__iand
	extern	_gfx_FillRectangle
	extern	_os_PutStrFull
	extern	__ixor
	extern	_ti_Open
	extern	__ltof
	extern	__ineg
	extern	_os_GetCSC
	extern	__fsub
	extern	_time
	extern	__frameset
	extern	_gfx_SetTextBGColor
	extern	_kb_Scan
	extern	__lsub
	extern	_gfx_GetStringWidth
	extern	_ti_Write
	extern	_strcmp
	extern	_ti_Delete
	extern	__ishru
	extern	__ultof
	extern	__fmul
	extern	_gfx_FillScreen
	extern	_os_FloatToReal
	extern	__irems
	extern	__iremu
	extern	__Unwind_SjLj_Unregister
	extern	__fdiv
	extern	__imulu
	extern	_gfx_SetColor
	extern	_gfx_Rectangle
	extern	__land
	extern	_gfx_PrintStringXY
	extern	_gfx_End
	extern	__fcmp
	extern	__frameset0
	extern	_clock
